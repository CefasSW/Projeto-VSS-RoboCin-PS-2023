// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_visualization.proto

#include "ssl_visualization.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fvisualization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Circle_ssl_5fvisualization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fvisualization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LineSegment_ssl_5fvisualization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fvisualization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metadata_ssl_5fvisualization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fvisualization_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RgbColor_ssl_5fvisualization_2eproto;
namespace RoboCupSSL {
class RgbColorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RgbColor> _instance;
} _RgbColor_default_instance_;
class MetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Metadata> _instance;
} _Metadata_default_instance_;
class LineSegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LineSegment> _instance;
} _LineSegment_default_instance_;
class CircleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Circle> _instance;
} _Circle_default_instance_;
class VisualizationFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VisualizationFrame> _instance;
} _VisualizationFrame_default_instance_;
}  // namespace RoboCupSSL
static void InitDefaultsscc_info_Circle_ssl_5fvisualization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoboCupSSL::_Circle_default_instance_;
    new (ptr) ::RoboCupSSL::Circle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoboCupSSL::Circle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Circle_ssl_5fvisualization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Circle_ssl_5fvisualization_2eproto}, {
      &scc_info_Metadata_ssl_5fvisualization_2eproto.base,}};

static void InitDefaultsscc_info_LineSegment_ssl_5fvisualization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoboCupSSL::_LineSegment_default_instance_;
    new (ptr) ::RoboCupSSL::LineSegment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoboCupSSL::LineSegment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LineSegment_ssl_5fvisualization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LineSegment_ssl_5fvisualization_2eproto}, {
      &scc_info_Metadata_ssl_5fvisualization_2eproto.base,}};

static void InitDefaultsscc_info_Metadata_ssl_5fvisualization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoboCupSSL::_Metadata_default_instance_;
    new (ptr) ::RoboCupSSL::Metadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoboCupSSL::Metadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metadata_ssl_5fvisualization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Metadata_ssl_5fvisualization_2eproto}, {
      &scc_info_RgbColor_ssl_5fvisualization_2eproto.base,}};

static void InitDefaultsscc_info_RgbColor_ssl_5fvisualization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoboCupSSL::_RgbColor_default_instance_;
    new (ptr) ::RoboCupSSL::RgbColor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoboCupSSL::RgbColor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RgbColor_ssl_5fvisualization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RgbColor_ssl_5fvisualization_2eproto}, {}};

static void InitDefaultsscc_info_VisualizationFrame_ssl_5fvisualization_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoboCupSSL::_VisualizationFrame_default_instance_;
    new (ptr) ::RoboCupSSL::VisualizationFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoboCupSSL::VisualizationFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VisualizationFrame_ssl_5fvisualization_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VisualizationFrame_ssl_5fvisualization_2eproto}, {
      &scc_info_LineSegment_ssl_5fvisualization_2eproto.base,
      &scc_info_Circle_ssl_5fvisualization_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ssl_5fvisualization_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ssl_5fvisualization_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssl_5fvisualization_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ssl_5fvisualization_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::RgbColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::RgbColor, r_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::RgbColor, g_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::RgbColor, b_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::RgbColor, a_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::Metadata, layer_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::Metadata, visiblebydefault_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::Metadata, order_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::Metadata, color_fill_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::Metadata, color_stroke_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::LineSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::LineSegment, metadata_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::LineSegment, start_x_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::LineSegment, start_y_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::LineSegment, end_x_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::LineSegment, end_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::Circle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::Circle, metadata_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::Circle, center_x_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::Circle, center_y_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::Circle, radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::VisualizationFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::VisualizationFrame, sender_id_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::VisualizationFrame, lines_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::VisualizationFrame, circles_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::RoboCupSSL::RgbColor)},
  { 9, -1, sizeof(::RoboCupSSL::Metadata)},
  { 19, -1, sizeof(::RoboCupSSL::LineSegment)},
  { 29, -1, sizeof(::RoboCupSSL::Circle)},
  { 38, -1, sizeof(::RoboCupSSL::VisualizationFrame)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoboCupSSL::_RgbColor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoboCupSSL::_Metadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoboCupSSL::_LineSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoboCupSSL::_Circle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoboCupSSL::_VisualizationFrame_default_instance_),
};

const char descriptor_table_protodef_ssl_5fvisualization_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027ssl_visualization.proto\022\nRoboCupSSL\"6\n"
  "\010RgbColor\022\t\n\001r\030\001 \001(\r\022\t\n\001g\030\002 \001(\r\022\t\n\001b\030\003 \001"
  "(\r\022\t\n\001a\030\004 \001(\002\"\230\001\n\010Metadata\022\r\n\005layer\030\001 \003("
  "\t\022\030\n\020visibleByDefault\030\002 \001(\010\022\r\n\005order\030\003 \001"
  "(\005\022(\n\ncolor_fill\030\004 \001(\0132\024.RoboCupSSL.RgbC"
  "olor\022*\n\014color_stroke\030\005 \001(\0132\024.RoboCupSSL."
  "RgbColor\"u\n\013LineSegment\022&\n\010metadata\030\001 \001("
  "\0132\024.RoboCupSSL.Metadata\022\017\n\007start_x\030\002 \001(\002"
  "\022\017\n\007start_y\030\003 \001(\002\022\r\n\005end_x\030\004 \001(\002\022\r\n\005end_"
  "y\030\005 \001(\002\"d\n\006Circle\022&\n\010metadata\030\001 \001(\0132\024.Ro"
  "boCupSSL.Metadata\022\020\n\010center_x\030\002 \001(\002\022\020\n\010c"
  "enter_y\030\003 \001(\002\022\016\n\006radius\030\004 \001(\002\"t\n\022Visuali"
  "zationFrame\022\021\n\tsender_id\030\001 \001(\t\022&\n\005lines\030"
  "\002 \003(\0132\027.RoboCupSSL.LineSegment\022#\n\007circle"
  "s\030\003 \003(\0132\022.RoboCupSSL.CircleB<Z:github.co"
  "m/RoboCup-SSL/ssl-vision-client/pkg/visu"
  "alizationb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ssl_5fvisualization_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ssl_5fvisualization_2eproto_sccs[5] = {
  &scc_info_Circle_ssl_5fvisualization_2eproto.base,
  &scc_info_LineSegment_ssl_5fvisualization_2eproto.base,
  &scc_info_Metadata_ssl_5fvisualization_2eproto.base,
  &scc_info_RgbColor_ssl_5fvisualization_2eproto.base,
  &scc_info_VisualizationFrame_ssl_5fvisualization_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssl_5fvisualization_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fvisualization_2eproto = {
  false, false, descriptor_table_protodef_ssl_5fvisualization_2eproto, "ssl_visualization.proto", 657,
  &descriptor_table_ssl_5fvisualization_2eproto_once, descriptor_table_ssl_5fvisualization_2eproto_sccs, descriptor_table_ssl_5fvisualization_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_ssl_5fvisualization_2eproto::offsets,
  file_level_metadata_ssl_5fvisualization_2eproto, 5, file_level_enum_descriptors_ssl_5fvisualization_2eproto, file_level_service_descriptors_ssl_5fvisualization_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ssl_5fvisualization_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ssl_5fvisualization_2eproto)), true);
namespace RoboCupSSL {

// ===================================================================

void RgbColor::InitAsDefaultInstance() {
}
class RgbColor::_Internal {
 public:
};

RgbColor::RgbColor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoboCupSSL.RgbColor)
}
RgbColor::RgbColor(const RgbColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_)) + sizeof(a_));
  // @@protoc_insertion_point(copy_constructor:RoboCupSSL.RgbColor)
}

void RgbColor::SharedCtor() {
  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&r_)) + sizeof(a_));
}

RgbColor::~RgbColor() {
  // @@protoc_insertion_point(destructor:RoboCupSSL.RgbColor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RgbColor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RgbColor::ArenaDtor(void* object) {
  RgbColor* _this = reinterpret_cast< RgbColor* >(object);
  (void)_this;
}
void RgbColor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RgbColor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RgbColor& RgbColor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RgbColor_ssl_5fvisualization_2eproto.base);
  return *internal_default_instance();
}


void RgbColor::Clear() {
// @@protoc_insertion_point(message_clear_start:RoboCupSSL.RgbColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&r_)) + sizeof(a_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RgbColor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RgbColor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboCupSSL.RgbColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 r = 1;
  if (this->r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_r(), target);
  }

  // uint32 g = 2;
  if (this->g() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_g(), target);
  }

  // uint32 b = 3;
  if (this->b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_b(), target);
  }

  // float a = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboCupSSL.RgbColor)
  return target;
}

size_t RgbColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoboCupSSL.RgbColor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 r = 1;
  if (this->r() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_r());
  }

  // uint32 g = 2;
  if (this->g() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_g());
  }

  // uint32 b = 3;
  if (this->b() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_b());
  }

  // float a = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RgbColor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoboCupSSL.RgbColor)
  GOOGLE_DCHECK_NE(&from, this);
  const RgbColor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RgbColor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoboCupSSL.RgbColor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoboCupSSL.RgbColor)
    MergeFrom(*source);
  }
}

void RgbColor::MergeFrom(const RgbColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoboCupSSL.RgbColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.r() != 0) {
    _internal_set_r(from._internal_r());
  }
  if (from.g() != 0) {
    _internal_set_g(from._internal_g());
  }
  if (from.b() != 0) {
    _internal_set_b(from._internal_b());
  }
  if (!(from.a() <= 0 && from.a() >= 0)) {
    _internal_set_a(from._internal_a());
  }
}

void RgbColor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoboCupSSL.RgbColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RgbColor::CopyFrom(const RgbColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoboCupSSL.RgbColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RgbColor::IsInitialized() const {
  return true;
}

void RgbColor::InternalSwap(RgbColor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RgbColor, a_)
      + sizeof(RgbColor::a_)
      - PROTOBUF_FIELD_OFFSET(RgbColor, r_)>(
          reinterpret_cast<char*>(&r_),
          reinterpret_cast<char*>(&other->r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RgbColor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Metadata::InitAsDefaultInstance() {
  ::RoboCupSSL::_Metadata_default_instance_._instance.get_mutable()->color_fill_ = const_cast< ::RoboCupSSL::RgbColor*>(
      ::RoboCupSSL::RgbColor::internal_default_instance());
  ::RoboCupSSL::_Metadata_default_instance_._instance.get_mutable()->color_stroke_ = const_cast< ::RoboCupSSL::RgbColor*>(
      ::RoboCupSSL::RgbColor::internal_default_instance());
}
class Metadata::_Internal {
 public:
  static const ::RoboCupSSL::RgbColor& color_fill(const Metadata* msg);
  static const ::RoboCupSSL::RgbColor& color_stroke(const Metadata* msg);
};

const ::RoboCupSSL::RgbColor&
Metadata::_Internal::color_fill(const Metadata* msg) {
  return *msg->color_fill_;
}
const ::RoboCupSSL::RgbColor&
Metadata::_Internal::color_stroke(const Metadata* msg) {
  return *msg->color_stroke_;
}
Metadata::Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  layer_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoboCupSSL.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      layer_(from.layer_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_color_fill()) {
    color_fill_ = new ::RoboCupSSL::RgbColor(*from.color_fill_);
  } else {
    color_fill_ = nullptr;
  }
  if (from._internal_has_color_stroke()) {
    color_stroke_ = new ::RoboCupSSL::RgbColor(*from.color_stroke_);
  } else {
    color_stroke_ = nullptr;
  }
  ::memcpy(&visiblebydefault_, &from.visiblebydefault_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_) -
    reinterpret_cast<char*>(&visiblebydefault_)) + sizeof(order_));
  // @@protoc_insertion_point(copy_constructor:RoboCupSSL.Metadata)
}

void Metadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Metadata_ssl_5fvisualization_2eproto.base);
  ::memset(&color_fill_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_) -
      reinterpret_cast<char*>(&color_fill_)) + sizeof(order_));
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:RoboCupSSL.Metadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete color_fill_;
  if (this != internal_default_instance()) delete color_stroke_;
}

void Metadata::ArenaDtor(void* object) {
  Metadata* _this = reinterpret_cast< Metadata* >(object);
  (void)_this;
}
void Metadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Metadata& Metadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Metadata_ssl_5fvisualization_2eproto.base);
  return *internal_default_instance();
}


void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:RoboCupSSL.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_.Clear();
  if (GetArena() == nullptr && color_fill_ != nullptr) {
    delete color_fill_;
  }
  color_fill_ = nullptr;
  if (GetArena() == nullptr && color_stroke_ != nullptr) {
    delete color_stroke_;
  }
  color_stroke_ = nullptr;
  ::memset(&visiblebydefault_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_) -
      reinterpret_cast<char*>(&visiblebydefault_)) + sizeof(order_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_layer();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoboCupSSL.Metadata.layer"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool visibleByDefault = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          visiblebydefault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RoboCupSSL.RgbColor color_fill = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_fill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RoboCupSSL.RgbColor color_stroke = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_color_stroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Metadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboCupSSL.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string layer = 1;
  for (int i = 0, n = this->_internal_layer_size(); i < n; i++) {
    const auto& s = this->_internal_layer(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoboCupSSL.Metadata.layer");
    target = stream->WriteString(1, s, target);
  }

  // bool visibleByDefault = 2;
  if (this->visiblebydefault() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_visiblebydefault(), target);
  }

  // int32 order = 3;
  if (this->order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_order(), target);
  }

  // .RoboCupSSL.RgbColor color_fill = 4;
  if (this->has_color_fill()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::color_fill(this), target, stream);
  }

  // .RoboCupSSL.RgbColor color_stroke = 5;
  if (this->has_color_stroke()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::color_stroke(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboCupSSL.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoboCupSSL.Metadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string layer = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(layer_.size());
  for (int i = 0, n = layer_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      layer_.Get(i));
  }

  // .RoboCupSSL.RgbColor color_fill = 4;
  if (this->has_color_fill()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_fill_);
  }

  // .RoboCupSSL.RgbColor color_stroke = 5;
  if (this->has_color_stroke()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_stroke_);
  }

  // bool visibleByDefault = 2;
  if (this->visiblebydefault() != 0) {
    total_size += 1 + 1;
  }

  // int32 order = 3;
  if (this->order() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_order());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Metadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoboCupSSL.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  const Metadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Metadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoboCupSSL.Metadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoboCupSSL.Metadata)
    MergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoboCupSSL.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layer_.MergeFrom(from.layer_);
  if (from.has_color_fill()) {
    _internal_mutable_color_fill()->::RoboCupSSL::RgbColor::MergeFrom(from._internal_color_fill());
  }
  if (from.has_color_stroke()) {
    _internal_mutable_color_stroke()->::RoboCupSSL::RgbColor::MergeFrom(from._internal_color_stroke());
  }
  if (from.visiblebydefault() != 0) {
    _internal_set_visiblebydefault(from._internal_visiblebydefault());
  }
  if (from.order() != 0) {
    _internal_set_order(from._internal_order());
  }
}

void Metadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoboCupSSL.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoboCupSSL.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  layer_.InternalSwap(&other->layer_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Metadata, order_)
      + sizeof(Metadata::order_)
      - PROTOBUF_FIELD_OFFSET(Metadata, color_fill_)>(
          reinterpret_cast<char*>(&color_fill_),
          reinterpret_cast<char*>(&other->color_fill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LineSegment::InitAsDefaultInstance() {
  ::RoboCupSSL::_LineSegment_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::RoboCupSSL::Metadata*>(
      ::RoboCupSSL::Metadata::internal_default_instance());
}
class LineSegment::_Internal {
 public:
  static const ::RoboCupSSL::Metadata& metadata(const LineSegment* msg);
};

const ::RoboCupSSL::Metadata&
LineSegment::_Internal::metadata(const LineSegment* msg) {
  return *msg->metadata_;
}
LineSegment::LineSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoboCupSSL.LineSegment)
}
LineSegment::LineSegment(const LineSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::RoboCupSSL::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  ::memcpy(&start_x_, &from.start_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_y_) -
    reinterpret_cast<char*>(&start_x_)) + sizeof(end_y_));
  // @@protoc_insertion_point(copy_constructor:RoboCupSSL.LineSegment)
}

void LineSegment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LineSegment_ssl_5fvisualization_2eproto.base);
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_y_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(end_y_));
}

LineSegment::~LineSegment() {
  // @@protoc_insertion_point(destructor:RoboCupSSL.LineSegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LineSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void LineSegment::ArenaDtor(void* object) {
  LineSegment* _this = reinterpret_cast< LineSegment* >(object);
  (void)_this;
}
void LineSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LineSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LineSegment& LineSegment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LineSegment_ssl_5fvisualization_2eproto.base);
  return *internal_default_instance();
}


void LineSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:RoboCupSSL.LineSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  ::memset(&start_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_y_) -
      reinterpret_cast<char*>(&start_x_)) + sizeof(end_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LineSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RoboCupSSL.Metadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float start_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          start_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float start_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          start_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float end_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          end_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float end_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          end_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LineSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboCupSSL.LineSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RoboCupSSL.Metadata metadata = 1;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // float start_x = 2;
  if (!(this->start_x() <= 0 && this->start_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_start_x(), target);
  }

  // float start_y = 3;
  if (!(this->start_y() <= 0 && this->start_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_start_y(), target);
  }

  // float end_x = 4;
  if (!(this->end_x() <= 0 && this->end_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_end_x(), target);
  }

  // float end_y = 5;
  if (!(this->end_y() <= 0 && this->end_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_end_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboCupSSL.LineSegment)
  return target;
}

size_t LineSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoboCupSSL.LineSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RoboCupSSL.Metadata metadata = 1;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // float start_x = 2;
  if (!(this->start_x() <= 0 && this->start_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float start_y = 3;
  if (!(this->start_y() <= 0 && this->start_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float end_x = 4;
  if (!(this->end_x() <= 0 && this->end_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float end_y = 5;
  if (!(this->end_y() <= 0 && this->end_y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LineSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoboCupSSL.LineSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const LineSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LineSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoboCupSSL.LineSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoboCupSSL.LineSegment)
    MergeFrom(*source);
  }
}

void LineSegment::MergeFrom(const LineSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoboCupSSL.LineSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_metadata()) {
    _internal_mutable_metadata()->::RoboCupSSL::Metadata::MergeFrom(from._internal_metadata());
  }
  if (!(from.start_x() <= 0 && from.start_x() >= 0)) {
    _internal_set_start_x(from._internal_start_x());
  }
  if (!(from.start_y() <= 0 && from.start_y() >= 0)) {
    _internal_set_start_y(from._internal_start_y());
  }
  if (!(from.end_x() <= 0 && from.end_x() >= 0)) {
    _internal_set_end_x(from._internal_end_x());
  }
  if (!(from.end_y() <= 0 && from.end_y() >= 0)) {
    _internal_set_end_y(from._internal_end_y());
  }
}

void LineSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoboCupSSL.LineSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineSegment::CopyFrom(const LineSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoboCupSSL.LineSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineSegment::IsInitialized() const {
  return true;
}

void LineSegment::InternalSwap(LineSegment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LineSegment, end_y_)
      + sizeof(LineSegment::end_y_)
      - PROTOBUF_FIELD_OFFSET(LineSegment, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LineSegment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Circle::InitAsDefaultInstance() {
  ::RoboCupSSL::_Circle_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::RoboCupSSL::Metadata*>(
      ::RoboCupSSL::Metadata::internal_default_instance());
}
class Circle::_Internal {
 public:
  static const ::RoboCupSSL::Metadata& metadata(const Circle* msg);
};

const ::RoboCupSSL::Metadata&
Circle::_Internal::metadata(const Circle* msg) {
  return *msg->metadata_;
}
Circle::Circle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoboCupSSL.Circle)
}
Circle::Circle(const Circle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::RoboCupSSL::Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  ::memcpy(&center_x_, &from.center_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&center_x_)) + sizeof(radius_));
  // @@protoc_insertion_point(copy_constructor:RoboCupSSL.Circle)
}

void Circle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Circle_ssl_5fvisualization_2eproto.base);
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(radius_));
}

Circle::~Circle() {
  // @@protoc_insertion_point(destructor:RoboCupSSL.Circle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Circle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void Circle::ArenaDtor(void* object) {
  Circle* _this = reinterpret_cast< Circle* >(object);
  (void)_this;
}
void Circle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Circle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Circle& Circle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Circle_ssl_5fvisualization_2eproto.base);
  return *internal_default_instance();
}


void Circle::Clear() {
// @@protoc_insertion_point(message_clear_start:RoboCupSSL.Circle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  ::memset(&center_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&center_x_)) + sizeof(radius_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Circle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RoboCupSSL.Metadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float center_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          center_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float center_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          center_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float radius = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Circle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboCupSSL.Circle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RoboCupSSL.Metadata metadata = 1;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // float center_x = 2;
  if (!(this->center_x() <= 0 && this->center_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_center_x(), target);
  }

  // float center_y = 3;
  if (!(this->center_y() <= 0 && this->center_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_center_y(), target);
  }

  // float radius = 4;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboCupSSL.Circle)
  return target;
}

size_t Circle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoboCupSSL.Circle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RoboCupSSL.Metadata metadata = 1;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // float center_x = 2;
  if (!(this->center_x() <= 0 && this->center_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float center_y = 3;
  if (!(this->center_y() <= 0 && this->center_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float radius = 4;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Circle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoboCupSSL.Circle)
  GOOGLE_DCHECK_NE(&from, this);
  const Circle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Circle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoboCupSSL.Circle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoboCupSSL.Circle)
    MergeFrom(*source);
  }
}

void Circle::MergeFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoboCupSSL.Circle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_metadata()) {
    _internal_mutable_metadata()->::RoboCupSSL::Metadata::MergeFrom(from._internal_metadata());
  }
  if (!(from.center_x() <= 0 && from.center_x() >= 0)) {
    _internal_set_center_x(from._internal_center_x());
  }
  if (!(from.center_y() <= 0 && from.center_y() >= 0)) {
    _internal_set_center_y(from._internal_center_y());
  }
  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
}

void Circle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoboCupSSL.Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Circle::CopyFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoboCupSSL.Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Circle::IsInitialized() const {
  return true;
}

void Circle::InternalSwap(Circle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Circle, radius_)
      + sizeof(Circle::radius_)
      - PROTOBUF_FIELD_OFFSET(Circle, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Circle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VisualizationFrame::InitAsDefaultInstance() {
}
class VisualizationFrame::_Internal {
 public:
};

VisualizationFrame::VisualizationFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lines_(arena),
  circles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoboCupSSL.VisualizationFrame)
}
VisualizationFrame::VisualizationFrame(const VisualizationFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lines_(from.lines_),
      circles_(from.circles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sender_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sender_id().empty()) {
    sender_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sender_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:RoboCupSSL.VisualizationFrame)
}

void VisualizationFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VisualizationFrame_ssl_5fvisualization_2eproto.base);
  sender_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VisualizationFrame::~VisualizationFrame() {
  // @@protoc_insertion_point(destructor:RoboCupSSL.VisualizationFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VisualizationFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sender_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VisualizationFrame::ArenaDtor(void* object) {
  VisualizationFrame* _this = reinterpret_cast< VisualizationFrame* >(object);
  (void)_this;
}
void VisualizationFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VisualizationFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VisualizationFrame& VisualizationFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VisualizationFrame_ssl_5fvisualization_2eproto.base);
  return *internal_default_instance();
}


void VisualizationFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:RoboCupSSL.VisualizationFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lines_.Clear();
  circles_.Clear();
  sender_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisualizationFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sender_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RoboCupSSL.VisualizationFrame.sender_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .RoboCupSSL.LineSegment lines = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .RoboCupSSL.Circle circles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_circles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VisualizationFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboCupSSL.VisualizationFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender_id = 1;
  if (this->sender_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_id().data(), static_cast<int>(this->_internal_sender_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoboCupSSL.VisualizationFrame.sender_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sender_id(), target);
  }

  // repeated .RoboCupSSL.LineSegment lines = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_lines(i), target, stream);
  }

  // repeated .RoboCupSSL.Circle circles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_circles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_circles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboCupSSL.VisualizationFrame)
  return target;
}

size_t VisualizationFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoboCupSSL.VisualizationFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RoboCupSSL.LineSegment lines = 2;
  total_size += 1UL * this->_internal_lines_size();
  for (const auto& msg : this->lines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .RoboCupSSL.Circle circles = 3;
  total_size += 1UL * this->_internal_circles_size();
  for (const auto& msg : this->circles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sender_id = 1;
  if (this->sender_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisualizationFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoboCupSSL.VisualizationFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const VisualizationFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VisualizationFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoboCupSSL.VisualizationFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoboCupSSL.VisualizationFrame)
    MergeFrom(*source);
  }
}

void VisualizationFrame::MergeFrom(const VisualizationFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoboCupSSL.VisualizationFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lines_.MergeFrom(from.lines_);
  circles_.MergeFrom(from.circles_);
  if (from.sender_id().size() > 0) {
    _internal_set_sender_id(from._internal_sender_id());
  }
}

void VisualizationFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoboCupSSL.VisualizationFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisualizationFrame::CopyFrom(const VisualizationFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoboCupSSL.VisualizationFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisualizationFrame::IsInitialized() const {
  return true;
}

void VisualizationFrame::InternalSwap(VisualizationFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lines_.InternalSwap(&other->lines_);
  circles_.InternalSwap(&other->circles_);
  sender_id_.Swap(&other->sender_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VisualizationFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace RoboCupSSL
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RoboCupSSL::RgbColor* Arena::CreateMaybeMessage< ::RoboCupSSL::RgbColor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoboCupSSL::RgbColor >(arena);
}
template<> PROTOBUF_NOINLINE ::RoboCupSSL::Metadata* Arena::CreateMaybeMessage< ::RoboCupSSL::Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoboCupSSL::Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::RoboCupSSL::LineSegment* Arena::CreateMaybeMessage< ::RoboCupSSL::LineSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoboCupSSL::LineSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::RoboCupSSL::Circle* Arena::CreateMaybeMessage< ::RoboCupSSL::Circle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoboCupSSL::Circle >(arena);
}
template<> PROTOBUF_NOINLINE ::RoboCupSSL::VisualizationFrame* Arena::CreateMaybeMessage< ::RoboCupSSL::VisualizationFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoboCupSSL::VisualizationFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
