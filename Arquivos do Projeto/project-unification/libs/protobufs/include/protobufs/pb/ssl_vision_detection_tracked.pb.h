// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_vision_detection_tracked.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5fvision_5fdetection_5ftracked_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5fvision_5fdetection_5ftracked_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ssl_gc_common.pb.h"
#include "ssl_gc_geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssl_5fvision_5fdetection_5ftracked_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5fvision_5fdetection_5ftracked_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto;
namespace RoboCupSSL {
class KickedBall;
class KickedBallDefaultTypeInternal;
extern KickedBallDefaultTypeInternal _KickedBall_default_instance_;
class TrackedBall;
class TrackedBallDefaultTypeInternal;
extern TrackedBallDefaultTypeInternal _TrackedBall_default_instance_;
class TrackedFrame;
class TrackedFrameDefaultTypeInternal;
extern TrackedFrameDefaultTypeInternal _TrackedFrame_default_instance_;
class TrackedRobot;
class TrackedRobotDefaultTypeInternal;
extern TrackedRobotDefaultTypeInternal _TrackedRobot_default_instance_;
}  // namespace RoboCupSSL
PROTOBUF_NAMESPACE_OPEN
template<> ::RoboCupSSL::KickedBall* Arena::CreateMaybeMessage<::RoboCupSSL::KickedBall>(Arena*);
template<> ::RoboCupSSL::TrackedBall* Arena::CreateMaybeMessage<::RoboCupSSL::TrackedBall>(Arena*);
template<> ::RoboCupSSL::TrackedFrame* Arena::CreateMaybeMessage<::RoboCupSSL::TrackedFrame>(Arena*);
template<> ::RoboCupSSL::TrackedRobot* Arena::CreateMaybeMessage<::RoboCupSSL::TrackedRobot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RoboCupSSL {

enum Capability : int {
  CAPABILITY_UNKNOWN = 0,
  CAPABILITY_DETECT_FLYING_BALLS = 1,
  CAPABILITY_DETECT_MULTIPLE_BALLS = 2,
  CAPABILITY_DETECT_KICKED_BALLS = 3
};
bool Capability_IsValid(int value);
constexpr Capability Capability_MIN = CAPABILITY_UNKNOWN;
constexpr Capability Capability_MAX = CAPABILITY_DETECT_KICKED_BALLS;
constexpr int Capability_ARRAYSIZE = Capability_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Capability_descriptor();
template<typename T>
inline const std::string& Capability_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Capability>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Capability_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Capability_descriptor(), enum_t_value);
}
inline bool Capability_Parse(
    const std::string& name, Capability* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Capability>(
    Capability_descriptor(), name, value);
}
// ===================================================================

class TrackedBall PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoboCupSSL.TrackedBall) */ {
 public:
  inline TrackedBall() : TrackedBall(nullptr) {};
  virtual ~TrackedBall();

  TrackedBall(const TrackedBall& from);
  TrackedBall(TrackedBall&& from) noexcept
    : TrackedBall() {
    *this = ::std::move(from);
  }

  inline TrackedBall& operator=(const TrackedBall& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackedBall& operator=(TrackedBall&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackedBall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackedBall* internal_default_instance() {
    return reinterpret_cast<const TrackedBall*>(
               &_TrackedBall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrackedBall& a, TrackedBall& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackedBall* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackedBall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackedBall* New() const final {
    return CreateMaybeMessage<TrackedBall>(nullptr);
  }

  TrackedBall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackedBall>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackedBall& from);
  void MergeFrom(const TrackedBall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackedBall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoboCupSSL.TrackedBall";
  }
  protected:
  explicit TrackedBall(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto);
    return ::descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kVelFieldNumber = 2,
    kVisibilityFieldNumber = 3,
  };
  // required .RoboCupSSL.Vector3 pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::RoboCupSSL::Vector3& pos() const;
  ::RoboCupSSL::Vector3* release_pos();
  ::RoboCupSSL::Vector3* mutable_pos();
  void set_allocated_pos(::RoboCupSSL::Vector3* pos);
  private:
  const ::RoboCupSSL::Vector3& _internal_pos() const;
  ::RoboCupSSL::Vector3* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::RoboCupSSL::Vector3* pos);
  ::RoboCupSSL::Vector3* unsafe_arena_release_pos();

  // optional .RoboCupSSL.Vector3 vel = 2;
  bool has_vel() const;
  private:
  bool _internal_has_vel() const;
  public:
  void clear_vel();
  const ::RoboCupSSL::Vector3& vel() const;
  ::RoboCupSSL::Vector3* release_vel();
  ::RoboCupSSL::Vector3* mutable_vel();
  void set_allocated_vel(::RoboCupSSL::Vector3* vel);
  private:
  const ::RoboCupSSL::Vector3& _internal_vel() const;
  ::RoboCupSSL::Vector3* _internal_mutable_vel();
  public:
  void unsafe_arena_set_allocated_vel(
      ::RoboCupSSL::Vector3* vel);
  ::RoboCupSSL::Vector3* unsafe_arena_release_vel();

  // optional float visibility = 3;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  float visibility() const;
  void set_visibility(float value);
  private:
  float _internal_visibility() const;
  void _internal_set_visibility(float value);
  public:

  // @@protoc_insertion_point(class_scope:RoboCupSSL.TrackedBall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::RoboCupSSL::Vector3* pos_;
  ::RoboCupSSL::Vector3* vel_;
  float visibility_;
  friend struct ::TableStruct_ssl_5fvision_5fdetection_5ftracked_2eproto;
};
// -------------------------------------------------------------------

class KickedBall PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoboCupSSL.KickedBall) */ {
 public:
  inline KickedBall() : KickedBall(nullptr) {};
  virtual ~KickedBall();

  KickedBall(const KickedBall& from);
  KickedBall(KickedBall&& from) noexcept
    : KickedBall() {
    *this = ::std::move(from);
  }

  inline KickedBall& operator=(const KickedBall& from) {
    CopyFrom(from);
    return *this;
  }
  inline KickedBall& operator=(KickedBall&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KickedBall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KickedBall* internal_default_instance() {
    return reinterpret_cast<const KickedBall*>(
               &_KickedBall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KickedBall& a, KickedBall& b) {
    a.Swap(&b);
  }
  inline void Swap(KickedBall* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KickedBall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KickedBall* New() const final {
    return CreateMaybeMessage<KickedBall>(nullptr);
  }

  KickedBall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KickedBall>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KickedBall& from);
  void MergeFrom(const KickedBall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KickedBall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoboCupSSL.KickedBall";
  }
  protected:
  explicit KickedBall(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto);
    return ::descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kVelFieldNumber = 2,
    kStopPosFieldNumber = 5,
    kRobotIdFieldNumber = 6,
    kStartTimestampFieldNumber = 3,
    kStopTimestampFieldNumber = 4,
  };
  // required .RoboCupSSL.Vector2 pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::RoboCupSSL::Vector2& pos() const;
  ::RoboCupSSL::Vector2* release_pos();
  ::RoboCupSSL::Vector2* mutable_pos();
  void set_allocated_pos(::RoboCupSSL::Vector2* pos);
  private:
  const ::RoboCupSSL::Vector2& _internal_pos() const;
  ::RoboCupSSL::Vector2* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::RoboCupSSL::Vector2* pos);
  ::RoboCupSSL::Vector2* unsafe_arena_release_pos();

  // required .RoboCupSSL.Vector3 vel = 2;
  bool has_vel() const;
  private:
  bool _internal_has_vel() const;
  public:
  void clear_vel();
  const ::RoboCupSSL::Vector3& vel() const;
  ::RoboCupSSL::Vector3* release_vel();
  ::RoboCupSSL::Vector3* mutable_vel();
  void set_allocated_vel(::RoboCupSSL::Vector3* vel);
  private:
  const ::RoboCupSSL::Vector3& _internal_vel() const;
  ::RoboCupSSL::Vector3* _internal_mutable_vel();
  public:
  void unsafe_arena_set_allocated_vel(
      ::RoboCupSSL::Vector3* vel);
  ::RoboCupSSL::Vector3* unsafe_arena_release_vel();

  // optional .RoboCupSSL.Vector2 stop_pos = 5;
  bool has_stop_pos() const;
  private:
  bool _internal_has_stop_pos() const;
  public:
  void clear_stop_pos();
  const ::RoboCupSSL::Vector2& stop_pos() const;
  ::RoboCupSSL::Vector2* release_stop_pos();
  ::RoboCupSSL::Vector2* mutable_stop_pos();
  void set_allocated_stop_pos(::RoboCupSSL::Vector2* stop_pos);
  private:
  const ::RoboCupSSL::Vector2& _internal_stop_pos() const;
  ::RoboCupSSL::Vector2* _internal_mutable_stop_pos();
  public:
  void unsafe_arena_set_allocated_stop_pos(
      ::RoboCupSSL::Vector2* stop_pos);
  ::RoboCupSSL::Vector2* unsafe_arena_release_stop_pos();

  // optional .RoboCupSSL.RobotId robot_id = 6;
  bool has_robot_id() const;
  private:
  bool _internal_has_robot_id() const;
  public:
  void clear_robot_id();
  const ::RoboCupSSL::RobotId& robot_id() const;
  ::RoboCupSSL::RobotId* release_robot_id();
  ::RoboCupSSL::RobotId* mutable_robot_id();
  void set_allocated_robot_id(::RoboCupSSL::RobotId* robot_id);
  private:
  const ::RoboCupSSL::RobotId& _internal_robot_id() const;
  ::RoboCupSSL::RobotId* _internal_mutable_robot_id();
  public:
  void unsafe_arena_set_allocated_robot_id(
      ::RoboCupSSL::RobotId* robot_id);
  ::RoboCupSSL::RobotId* unsafe_arena_release_robot_id();

  // required double start_timestamp = 3;
  bool has_start_timestamp() const;
  private:
  bool _internal_has_start_timestamp() const;
  public:
  void clear_start_timestamp();
  double start_timestamp() const;
  void set_start_timestamp(double value);
  private:
  double _internal_start_timestamp() const;
  void _internal_set_start_timestamp(double value);
  public:

  // optional double stop_timestamp = 4;
  bool has_stop_timestamp() const;
  private:
  bool _internal_has_stop_timestamp() const;
  public:
  void clear_stop_timestamp();
  double stop_timestamp() const;
  void set_stop_timestamp(double value);
  private:
  double _internal_stop_timestamp() const;
  void _internal_set_stop_timestamp(double value);
  public:

  // @@protoc_insertion_point(class_scope:RoboCupSSL.KickedBall)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::RoboCupSSL::Vector2* pos_;
  ::RoboCupSSL::Vector3* vel_;
  ::RoboCupSSL::Vector2* stop_pos_;
  ::RoboCupSSL::RobotId* robot_id_;
  double start_timestamp_;
  double stop_timestamp_;
  friend struct ::TableStruct_ssl_5fvision_5fdetection_5ftracked_2eproto;
};
// -------------------------------------------------------------------

class TrackedRobot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoboCupSSL.TrackedRobot) */ {
 public:
  inline TrackedRobot() : TrackedRobot(nullptr) {};
  virtual ~TrackedRobot();

  TrackedRobot(const TrackedRobot& from);
  TrackedRobot(TrackedRobot&& from) noexcept
    : TrackedRobot() {
    *this = ::std::move(from);
  }

  inline TrackedRobot& operator=(const TrackedRobot& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackedRobot& operator=(TrackedRobot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackedRobot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackedRobot* internal_default_instance() {
    return reinterpret_cast<const TrackedRobot*>(
               &_TrackedRobot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrackedRobot& a, TrackedRobot& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackedRobot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackedRobot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackedRobot* New() const final {
    return CreateMaybeMessage<TrackedRobot>(nullptr);
  }

  TrackedRobot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackedRobot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackedRobot& from);
  void MergeFrom(const TrackedRobot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackedRobot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoboCupSSL.TrackedRobot";
  }
  protected:
  explicit TrackedRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto);
    return ::descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
    kPosFieldNumber = 2,
    kVelFieldNumber = 4,
    kOrientationFieldNumber = 3,
    kVelAngularFieldNumber = 5,
    kVisibilityFieldNumber = 6,
  };
  // required .RoboCupSSL.RobotId robot_id = 1;
  bool has_robot_id() const;
  private:
  bool _internal_has_robot_id() const;
  public:
  void clear_robot_id();
  const ::RoboCupSSL::RobotId& robot_id() const;
  ::RoboCupSSL::RobotId* release_robot_id();
  ::RoboCupSSL::RobotId* mutable_robot_id();
  void set_allocated_robot_id(::RoboCupSSL::RobotId* robot_id);
  private:
  const ::RoboCupSSL::RobotId& _internal_robot_id() const;
  ::RoboCupSSL::RobotId* _internal_mutable_robot_id();
  public:
  void unsafe_arena_set_allocated_robot_id(
      ::RoboCupSSL::RobotId* robot_id);
  ::RoboCupSSL::RobotId* unsafe_arena_release_robot_id();

  // required .RoboCupSSL.Vector2 pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::RoboCupSSL::Vector2& pos() const;
  ::RoboCupSSL::Vector2* release_pos();
  ::RoboCupSSL::Vector2* mutable_pos();
  void set_allocated_pos(::RoboCupSSL::Vector2* pos);
  private:
  const ::RoboCupSSL::Vector2& _internal_pos() const;
  ::RoboCupSSL::Vector2* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::RoboCupSSL::Vector2* pos);
  ::RoboCupSSL::Vector2* unsafe_arena_release_pos();

  // optional .RoboCupSSL.Vector2 vel = 4;
  bool has_vel() const;
  private:
  bool _internal_has_vel() const;
  public:
  void clear_vel();
  const ::RoboCupSSL::Vector2& vel() const;
  ::RoboCupSSL::Vector2* release_vel();
  ::RoboCupSSL::Vector2* mutable_vel();
  void set_allocated_vel(::RoboCupSSL::Vector2* vel);
  private:
  const ::RoboCupSSL::Vector2& _internal_vel() const;
  ::RoboCupSSL::Vector2* _internal_mutable_vel();
  public:
  void unsafe_arena_set_allocated_vel(
      ::RoboCupSSL::Vector2* vel);
  ::RoboCupSSL::Vector2* unsafe_arena_release_vel();

  // required float orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  float orientation() const;
  void set_orientation(float value);
  private:
  float _internal_orientation() const;
  void _internal_set_orientation(float value);
  public:

  // optional float vel_angular = 5;
  bool has_vel_angular() const;
  private:
  bool _internal_has_vel_angular() const;
  public:
  void clear_vel_angular();
  float vel_angular() const;
  void set_vel_angular(float value);
  private:
  float _internal_vel_angular() const;
  void _internal_set_vel_angular(float value);
  public:

  // optional float visibility = 6;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  float visibility() const;
  void set_visibility(float value);
  private:
  float _internal_visibility() const;
  void _internal_set_visibility(float value);
  public:

  // @@protoc_insertion_point(class_scope:RoboCupSSL.TrackedRobot)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::RoboCupSSL::RobotId* robot_id_;
  ::RoboCupSSL::Vector2* pos_;
  ::RoboCupSSL::Vector2* vel_;
  float orientation_;
  float vel_angular_;
  float visibility_;
  friend struct ::TableStruct_ssl_5fvision_5fdetection_5ftracked_2eproto;
};
// -------------------------------------------------------------------

class TrackedFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoboCupSSL.TrackedFrame) */ {
 public:
  inline TrackedFrame() : TrackedFrame(nullptr) {};
  virtual ~TrackedFrame();

  TrackedFrame(const TrackedFrame& from);
  TrackedFrame(TrackedFrame&& from) noexcept
    : TrackedFrame() {
    *this = ::std::move(from);
  }

  inline TrackedFrame& operator=(const TrackedFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackedFrame& operator=(TrackedFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackedFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackedFrame* internal_default_instance() {
    return reinterpret_cast<const TrackedFrame*>(
               &_TrackedFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TrackedFrame& a, TrackedFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackedFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackedFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackedFrame* New() const final {
    return CreateMaybeMessage<TrackedFrame>(nullptr);
  }

  TrackedFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackedFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackedFrame& from);
  void MergeFrom(const TrackedFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackedFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoboCupSSL.TrackedFrame";
  }
  protected:
  explicit TrackedFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto);
    return ::descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBallsFieldNumber = 3,
    kRobotsFieldNumber = 4,
    kCapabilitiesFieldNumber = 6,
    kKickedBallFieldNumber = 5,
    kTimestampFieldNumber = 2,
    kFrameNumberFieldNumber = 1,
  };
  // repeated .RoboCupSSL.TrackedBall balls = 3;
  int balls_size() const;
  private:
  int _internal_balls_size() const;
  public:
  void clear_balls();
  ::RoboCupSSL::TrackedBall* mutable_balls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoboCupSSL::TrackedBall >*
      mutable_balls();
  private:
  const ::RoboCupSSL::TrackedBall& _internal_balls(int index) const;
  ::RoboCupSSL::TrackedBall* _internal_add_balls();
  public:
  const ::RoboCupSSL::TrackedBall& balls(int index) const;
  ::RoboCupSSL::TrackedBall* add_balls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoboCupSSL::TrackedBall >&
      balls() const;

  // repeated .RoboCupSSL.TrackedRobot robots = 4;
  int robots_size() const;
  private:
  int _internal_robots_size() const;
  public:
  void clear_robots();
  ::RoboCupSSL::TrackedRobot* mutable_robots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoboCupSSL::TrackedRobot >*
      mutable_robots();
  private:
  const ::RoboCupSSL::TrackedRobot& _internal_robots(int index) const;
  ::RoboCupSSL::TrackedRobot* _internal_add_robots();
  public:
  const ::RoboCupSSL::TrackedRobot& robots(int index) const;
  ::RoboCupSSL::TrackedRobot* add_robots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoboCupSSL::TrackedRobot >&
      robots() const;

  // repeated .RoboCupSSL.Capability capabilities = 6;
  int capabilities_size() const;
  private:
  int _internal_capabilities_size() const;
  public:
  void clear_capabilities();
  private:
  ::RoboCupSSL::Capability _internal_capabilities(int index) const;
  void _internal_add_capabilities(::RoboCupSSL::Capability value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_capabilities();
  public:
  ::RoboCupSSL::Capability capabilities(int index) const;
  void set_capabilities(int index, ::RoboCupSSL::Capability value);
  void add_capabilities(::RoboCupSSL::Capability value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& capabilities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_capabilities();

  // optional .RoboCupSSL.KickedBall kicked_ball = 5;
  bool has_kicked_ball() const;
  private:
  bool _internal_has_kicked_ball() const;
  public:
  void clear_kicked_ball();
  const ::RoboCupSSL::KickedBall& kicked_ball() const;
  ::RoboCupSSL::KickedBall* release_kicked_ball();
  ::RoboCupSSL::KickedBall* mutable_kicked_ball();
  void set_allocated_kicked_ball(::RoboCupSSL::KickedBall* kicked_ball);
  private:
  const ::RoboCupSSL::KickedBall& _internal_kicked_ball() const;
  ::RoboCupSSL::KickedBall* _internal_mutable_kicked_ball();
  public:
  void unsafe_arena_set_allocated_kicked_ball(
      ::RoboCupSSL::KickedBall* kicked_ball);
  ::RoboCupSSL::KickedBall* unsafe_arena_release_kicked_ball();

  // required double timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // required uint32 frame_number = 1;
  bool has_frame_number() const;
  private:
  bool _internal_has_frame_number() const;
  public:
  void clear_frame_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_number() const;
  void set_frame_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frame_number() const;
  void _internal_set_frame_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:RoboCupSSL.TrackedFrame)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoboCupSSL::TrackedBall > balls_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoboCupSSL::TrackedRobot > robots_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> capabilities_;
  ::RoboCupSSL::KickedBall* kicked_ball_;
  double timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_number_;
  friend struct ::TableStruct_ssl_5fvision_5fdetection_5ftracked_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrackedBall

// required .RoboCupSSL.Vector3 pos = 1;
inline bool TrackedBall::_internal_has_pos() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pos_ != nullptr);
  return value;
}
inline bool TrackedBall::has_pos() const {
  return _internal_has_pos();
}
inline const ::RoboCupSSL::Vector3& TrackedBall::_internal_pos() const {
  const ::RoboCupSSL::Vector3* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoboCupSSL::Vector3*>(
      &::RoboCupSSL::_Vector3_default_instance_);
}
inline const ::RoboCupSSL::Vector3& TrackedBall::pos() const {
  // @@protoc_insertion_point(field_get:RoboCupSSL.TrackedBall.pos)
  return _internal_pos();
}
inline void TrackedBall::unsafe_arena_set_allocated_pos(
    ::RoboCupSSL::Vector3* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoboCupSSL.TrackedBall.pos)
}
inline ::RoboCupSSL::Vector3* TrackedBall::release_pos() {
  auto temp = unsafe_arena_release_pos();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoboCupSSL::Vector3* TrackedBall::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:RoboCupSSL.TrackedBall.pos)
  _has_bits_[0] &= ~0x00000001u;
  ::RoboCupSSL::Vector3* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::RoboCupSSL::Vector3* TrackedBall::_internal_mutable_pos() {
  _has_bits_[0] |= 0x00000001u;
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoboCupSSL::Vector3>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::RoboCupSSL::Vector3* TrackedBall::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:RoboCupSSL.TrackedBall.pos)
  return _internal_mutable_pos();
}
inline void TrackedBall::set_allocated_pos(::RoboCupSSL::Vector3* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos)->GetArena();
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:RoboCupSSL.TrackedBall.pos)
}

// optional .RoboCupSSL.Vector3 vel = 2;
inline bool TrackedBall::_internal_has_vel() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || vel_ != nullptr);
  return value;
}
inline bool TrackedBall::has_vel() const {
  return _internal_has_vel();
}
inline const ::RoboCupSSL::Vector3& TrackedBall::_internal_vel() const {
  const ::RoboCupSSL::Vector3* p = vel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoboCupSSL::Vector3*>(
      &::RoboCupSSL::_Vector3_default_instance_);
}
inline const ::RoboCupSSL::Vector3& TrackedBall::vel() const {
  // @@protoc_insertion_point(field_get:RoboCupSSL.TrackedBall.vel)
  return _internal_vel();
}
inline void TrackedBall::unsafe_arena_set_allocated_vel(
    ::RoboCupSSL::Vector3* vel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_);
  }
  vel_ = vel;
  if (vel) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoboCupSSL.TrackedBall.vel)
}
inline ::RoboCupSSL::Vector3* TrackedBall::release_vel() {
  auto temp = unsafe_arena_release_vel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoboCupSSL::Vector3* TrackedBall::unsafe_arena_release_vel() {
  // @@protoc_insertion_point(field_release:RoboCupSSL.TrackedBall.vel)
  _has_bits_[0] &= ~0x00000002u;
  ::RoboCupSSL::Vector3* temp = vel_;
  vel_ = nullptr;
  return temp;
}
inline ::RoboCupSSL::Vector3* TrackedBall::_internal_mutable_vel() {
  _has_bits_[0] |= 0x00000002u;
  if (vel_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoboCupSSL::Vector3>(GetArena());
    vel_ = p;
  }
  return vel_;
}
inline ::RoboCupSSL::Vector3* TrackedBall::mutable_vel() {
  // @@protoc_insertion_point(field_mutable:RoboCupSSL.TrackedBall.vel)
  return _internal_mutable_vel();
}
inline void TrackedBall::set_allocated_vel(::RoboCupSSL::Vector3* vel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_);
  }
  if (vel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel)->GetArena();
    if (message_arena != submessage_arena) {
      vel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vel_ = vel;
  // @@protoc_insertion_point(field_set_allocated:RoboCupSSL.TrackedBall.vel)
}

// optional float visibility = 3;
inline bool TrackedBall::_internal_has_visibility() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrackedBall::has_visibility() const {
  return _internal_has_visibility();
}
inline void TrackedBall::clear_visibility() {
  visibility_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float TrackedBall::_internal_visibility() const {
  return visibility_;
}
inline float TrackedBall::visibility() const {
  // @@protoc_insertion_point(field_get:RoboCupSSL.TrackedBall.visibility)
  return _internal_visibility();
}
inline void TrackedBall::_internal_set_visibility(float value) {
  _has_bits_[0] |= 0x00000004u;
  visibility_ = value;
}
inline void TrackedBall::set_visibility(float value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:RoboCupSSL.TrackedBall.visibility)
}

// -------------------------------------------------------------------

// KickedBall

// required .RoboCupSSL.Vector2 pos = 1;
inline bool KickedBall::_internal_has_pos() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pos_ != nullptr);
  return value;
}
inline bool KickedBall::has_pos() const {
  return _internal_has_pos();
}
inline const ::RoboCupSSL::Vector2& KickedBall::_internal_pos() const {
  const ::RoboCupSSL::Vector2* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoboCupSSL::Vector2*>(
      &::RoboCupSSL::_Vector2_default_instance_);
}
inline const ::RoboCupSSL::Vector2& KickedBall::pos() const {
  // @@protoc_insertion_point(field_get:RoboCupSSL.KickedBall.pos)
  return _internal_pos();
}
inline void KickedBall::unsafe_arena_set_allocated_pos(
    ::RoboCupSSL::Vector2* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoboCupSSL.KickedBall.pos)
}
inline ::RoboCupSSL::Vector2* KickedBall::release_pos() {
  auto temp = unsafe_arena_release_pos();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoboCupSSL::Vector2* KickedBall::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:RoboCupSSL.KickedBall.pos)
  _has_bits_[0] &= ~0x00000001u;
  ::RoboCupSSL::Vector2* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::RoboCupSSL::Vector2* KickedBall::_internal_mutable_pos() {
  _has_bits_[0] |= 0x00000001u;
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoboCupSSL::Vector2>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::RoboCupSSL::Vector2* KickedBall::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:RoboCupSSL.KickedBall.pos)
  return _internal_mutable_pos();
}
inline void KickedBall::set_allocated_pos(::RoboCupSSL::Vector2* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos)->GetArena();
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:RoboCupSSL.KickedBall.pos)
}

// required .RoboCupSSL.Vector3 vel = 2;
inline bool KickedBall::_internal_has_vel() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || vel_ != nullptr);
  return value;
}
inline bool KickedBall::has_vel() const {
  return _internal_has_vel();
}
inline const ::RoboCupSSL::Vector3& KickedBall::_internal_vel() const {
  const ::RoboCupSSL::Vector3* p = vel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoboCupSSL::Vector3*>(
      &::RoboCupSSL::_Vector3_default_instance_);
}
inline const ::RoboCupSSL::Vector3& KickedBall::vel() const {
  // @@protoc_insertion_point(field_get:RoboCupSSL.KickedBall.vel)
  return _internal_vel();
}
inline void KickedBall::unsafe_arena_set_allocated_vel(
    ::RoboCupSSL::Vector3* vel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_);
  }
  vel_ = vel;
  if (vel) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoboCupSSL.KickedBall.vel)
}
inline ::RoboCupSSL::Vector3* KickedBall::release_vel() {
  auto temp = unsafe_arena_release_vel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoboCupSSL::Vector3* KickedBall::unsafe_arena_release_vel() {
  // @@protoc_insertion_point(field_release:RoboCupSSL.KickedBall.vel)
  _has_bits_[0] &= ~0x00000002u;
  ::RoboCupSSL::Vector3* temp = vel_;
  vel_ = nullptr;
  return temp;
}
inline ::RoboCupSSL::Vector3* KickedBall::_internal_mutable_vel() {
  _has_bits_[0] |= 0x00000002u;
  if (vel_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoboCupSSL::Vector3>(GetArena());
    vel_ = p;
  }
  return vel_;
}
inline ::RoboCupSSL::Vector3* KickedBall::mutable_vel() {
  // @@protoc_insertion_point(field_mutable:RoboCupSSL.KickedBall.vel)
  return _internal_mutable_vel();
}
inline void KickedBall::set_allocated_vel(::RoboCupSSL::Vector3* vel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_);
  }
  if (vel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel)->GetArena();
    if (message_arena != submessage_arena) {
      vel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vel_ = vel;
  // @@protoc_insertion_point(field_set_allocated:RoboCupSSL.KickedBall.vel)
}

// required double start_timestamp = 3;
inline bool KickedBall::_internal_has_start_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KickedBall::has_start_timestamp() const {
  return _internal_has_start_timestamp();
}
inline void KickedBall::clear_start_timestamp() {
  start_timestamp_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double KickedBall::_internal_start_timestamp() const {
  return start_timestamp_;
}
inline double KickedBall::start_timestamp() const {
  // @@protoc_insertion_point(field_get:RoboCupSSL.KickedBall.start_timestamp)
  return _internal_start_timestamp();
}
inline void KickedBall::_internal_set_start_timestamp(double value) {
  _has_bits_[0] |= 0x00000010u;
  start_timestamp_ = value;
}
inline void KickedBall::set_start_timestamp(double value) {
  _internal_set_start_timestamp(value);
  // @@protoc_insertion_point(field_set:RoboCupSSL.KickedBall.start_timestamp)
}

// optional double stop_timestamp = 4;
inline bool KickedBall::_internal_has_stop_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KickedBall::has_stop_timestamp() const {
  return _internal_has_stop_timestamp();
}
inline void KickedBall::clear_stop_timestamp() {
  stop_timestamp_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double KickedBall::_internal_stop_timestamp() const {
  return stop_timestamp_;
}
inline double KickedBall::stop_timestamp() const {
  // @@protoc_insertion_point(field_get:RoboCupSSL.KickedBall.stop_timestamp)
  return _internal_stop_timestamp();
}
inline void KickedBall::_internal_set_stop_timestamp(double value) {
  _has_bits_[0] |= 0x00000020u;
  stop_timestamp_ = value;
}
inline void KickedBall::set_stop_timestamp(double value) {
  _internal_set_stop_timestamp(value);
  // @@protoc_insertion_point(field_set:RoboCupSSL.KickedBall.stop_timestamp)
}

// optional .RoboCupSSL.Vector2 stop_pos = 5;
inline bool KickedBall::_internal_has_stop_pos() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || stop_pos_ != nullptr);
  return value;
}
inline bool KickedBall::has_stop_pos() const {
  return _internal_has_stop_pos();
}
inline const ::RoboCupSSL::Vector2& KickedBall::_internal_stop_pos() const {
  const ::RoboCupSSL::Vector2* p = stop_pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoboCupSSL::Vector2*>(
      &::RoboCupSSL::_Vector2_default_instance_);
}
inline const ::RoboCupSSL::Vector2& KickedBall::stop_pos() const {
  // @@protoc_insertion_point(field_get:RoboCupSSL.KickedBall.stop_pos)
  return _internal_stop_pos();
}
inline void KickedBall::unsafe_arena_set_allocated_stop_pos(
    ::RoboCupSSL::Vector2* stop_pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_pos_);
  }
  stop_pos_ = stop_pos;
  if (stop_pos) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoboCupSSL.KickedBall.stop_pos)
}
inline ::RoboCupSSL::Vector2* KickedBall::release_stop_pos() {
  auto temp = unsafe_arena_release_stop_pos();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoboCupSSL::Vector2* KickedBall::unsafe_arena_release_stop_pos() {
  // @@protoc_insertion_point(field_release:RoboCupSSL.KickedBall.stop_pos)
  _has_bits_[0] &= ~0x00000004u;
  ::RoboCupSSL::Vector2* temp = stop_pos_;
  stop_pos_ = nullptr;
  return temp;
}
inline ::RoboCupSSL::Vector2* KickedBall::_internal_mutable_stop_pos() {
  _has_bits_[0] |= 0x00000004u;
  if (stop_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoboCupSSL::Vector2>(GetArena());
    stop_pos_ = p;
  }
  return stop_pos_;
}
inline ::RoboCupSSL::Vector2* KickedBall::mutable_stop_pos() {
  // @@protoc_insertion_point(field_mutable:RoboCupSSL.KickedBall.stop_pos)
  return _internal_mutable_stop_pos();
}
inline void KickedBall::set_allocated_stop_pos(::RoboCupSSL::Vector2* stop_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_pos_);
  }
  if (stop_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_pos)->GetArena();
    if (message_arena != submessage_arena) {
      stop_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_pos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  stop_pos_ = stop_pos;
  // @@protoc_insertion_point(field_set_allocated:RoboCupSSL.KickedBall.stop_pos)
}

// optional .RoboCupSSL.RobotId robot_id = 6;
inline bool KickedBall::_internal_has_robot_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || robot_id_ != nullptr);
  return value;
}
inline bool KickedBall::has_robot_id() const {
  return _internal_has_robot_id();
}
inline const ::RoboCupSSL::RobotId& KickedBall::_internal_robot_id() const {
  const ::RoboCupSSL::RobotId* p = robot_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoboCupSSL::RobotId*>(
      &::RoboCupSSL::_RobotId_default_instance_);
}
inline const ::RoboCupSSL::RobotId& KickedBall::robot_id() const {
  // @@protoc_insertion_point(field_get:RoboCupSSL.KickedBall.robot_id)
  return _internal_robot_id();
}
inline void KickedBall::unsafe_arena_set_allocated_robot_id(
    ::RoboCupSSL::RobotId* robot_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(robot_id_);
  }
  robot_id_ = robot_id;
  if (robot_id) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoboCupSSL.KickedBall.robot_id)
}
inline ::RoboCupSSL::RobotId* KickedBall::release_robot_id() {
  auto temp = unsafe_arena_release_robot_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoboCupSSL::RobotId* KickedBall::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_release:RoboCupSSL.KickedBall.robot_id)
  _has_bits_[0] &= ~0x00000008u;
  ::RoboCupSSL::RobotId* temp = robot_id_;
  robot_id_ = nullptr;
  return temp;
}
inline ::RoboCupSSL::RobotId* KickedBall::_internal_mutable_robot_id() {
  _has_bits_[0] |= 0x00000008u;
  if (robot_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoboCupSSL::RobotId>(GetArena());
    robot_id_ = p;
  }
  return robot_id_;
}
inline ::RoboCupSSL::RobotId* KickedBall::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:RoboCupSSL.KickedBall.robot_id)
  return _internal_mutable_robot_id();
}
inline void KickedBall::set_allocated_robot_id(::RoboCupSSL::RobotId* robot_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(robot_id_);
  }
  if (robot_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(robot_id)->GetArena();
    if (message_arena != submessage_arena) {
      robot_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, robot_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  robot_id_ = robot_id;
  // @@protoc_insertion_point(field_set_allocated:RoboCupSSL.KickedBall.robot_id)
}

// -------------------------------------------------------------------

// TrackedRobot

// required .RoboCupSSL.RobotId robot_id = 1;
inline bool TrackedRobot::_internal_has_robot_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || robot_id_ != nullptr);
  return value;
}
inline bool TrackedRobot::has_robot_id() const {
  return _internal_has_robot_id();
}
inline const ::RoboCupSSL::RobotId& TrackedRobot::_internal_robot_id() const {
  const ::RoboCupSSL::RobotId* p = robot_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoboCupSSL::RobotId*>(
      &::RoboCupSSL::_RobotId_default_instance_);
}
inline const ::RoboCupSSL::RobotId& TrackedRobot::robot_id() const {
  // @@protoc_insertion_point(field_get:RoboCupSSL.TrackedRobot.robot_id)
  return _internal_robot_id();
}
inline void TrackedRobot::unsafe_arena_set_allocated_robot_id(
    ::RoboCupSSL::RobotId* robot_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(robot_id_);
  }
  robot_id_ = robot_id;
  if (robot_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoboCupSSL.TrackedRobot.robot_id)
}
inline ::RoboCupSSL::RobotId* TrackedRobot::release_robot_id() {
  auto temp = unsafe_arena_release_robot_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoboCupSSL::RobotId* TrackedRobot::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_release:RoboCupSSL.TrackedRobot.robot_id)
  _has_bits_[0] &= ~0x00000001u;
  ::RoboCupSSL::RobotId* temp = robot_id_;
  robot_id_ = nullptr;
  return temp;
}
inline ::RoboCupSSL::RobotId* TrackedRobot::_internal_mutable_robot_id() {
  _has_bits_[0] |= 0x00000001u;
  if (robot_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoboCupSSL::RobotId>(GetArena());
    robot_id_ = p;
  }
  return robot_id_;
}
inline ::RoboCupSSL::RobotId* TrackedRobot::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:RoboCupSSL.TrackedRobot.robot_id)
  return _internal_mutable_robot_id();
}
inline void TrackedRobot::set_allocated_robot_id(::RoboCupSSL::RobotId* robot_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(robot_id_);
  }
  if (robot_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(robot_id)->GetArena();
    if (message_arena != submessage_arena) {
      robot_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, robot_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  robot_id_ = robot_id;
  // @@protoc_insertion_point(field_set_allocated:RoboCupSSL.TrackedRobot.robot_id)
}

// required .RoboCupSSL.Vector2 pos = 2;
inline bool TrackedRobot::_internal_has_pos() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pos_ != nullptr);
  return value;
}
inline bool TrackedRobot::has_pos() const {
  return _internal_has_pos();
}
inline const ::RoboCupSSL::Vector2& TrackedRobot::_internal_pos() const {
  const ::RoboCupSSL::Vector2* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoboCupSSL::Vector2*>(
      &::RoboCupSSL::_Vector2_default_instance_);
}
inline const ::RoboCupSSL::Vector2& TrackedRobot::pos() const {
  // @@protoc_insertion_point(field_get:RoboCupSSL.TrackedRobot.pos)
  return _internal_pos();
}
inline void TrackedRobot::unsafe_arena_set_allocated_pos(
    ::RoboCupSSL::Vector2* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoboCupSSL.TrackedRobot.pos)
}
inline ::RoboCupSSL::Vector2* TrackedRobot::release_pos() {
  auto temp = unsafe_arena_release_pos();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoboCupSSL::Vector2* TrackedRobot::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:RoboCupSSL.TrackedRobot.pos)
  _has_bits_[0] &= ~0x00000002u;
  ::RoboCupSSL::Vector2* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::RoboCupSSL::Vector2* TrackedRobot::_internal_mutable_pos() {
  _has_bits_[0] |= 0x00000002u;
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoboCupSSL::Vector2>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::RoboCupSSL::Vector2* TrackedRobot::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:RoboCupSSL.TrackedRobot.pos)
  return _internal_mutable_pos();
}
inline void TrackedRobot::set_allocated_pos(::RoboCupSSL::Vector2* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos)->GetArena();
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:RoboCupSSL.TrackedRobot.pos)
}

// required float orientation = 3;
inline bool TrackedRobot::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrackedRobot::has_orientation() const {
  return _internal_has_orientation();
}
inline void TrackedRobot::clear_orientation() {
  orientation_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TrackedRobot::_internal_orientation() const {
  return orientation_;
}
inline float TrackedRobot::orientation() const {
  // @@protoc_insertion_point(field_get:RoboCupSSL.TrackedRobot.orientation)
  return _internal_orientation();
}
inline void TrackedRobot::_internal_set_orientation(float value) {
  _has_bits_[0] |= 0x00000008u;
  orientation_ = value;
}
inline void TrackedRobot::set_orientation(float value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:RoboCupSSL.TrackedRobot.orientation)
}

// optional .RoboCupSSL.Vector2 vel = 4;
inline bool TrackedRobot::_internal_has_vel() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || vel_ != nullptr);
  return value;
}
inline bool TrackedRobot::has_vel() const {
  return _internal_has_vel();
}
inline const ::RoboCupSSL::Vector2& TrackedRobot::_internal_vel() const {
  const ::RoboCupSSL::Vector2* p = vel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoboCupSSL::Vector2*>(
      &::RoboCupSSL::_Vector2_default_instance_);
}
inline const ::RoboCupSSL::Vector2& TrackedRobot::vel() const {
  // @@protoc_insertion_point(field_get:RoboCupSSL.TrackedRobot.vel)
  return _internal_vel();
}
inline void TrackedRobot::unsafe_arena_set_allocated_vel(
    ::RoboCupSSL::Vector2* vel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_);
  }
  vel_ = vel;
  if (vel) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoboCupSSL.TrackedRobot.vel)
}
inline ::RoboCupSSL::Vector2* TrackedRobot::release_vel() {
  auto temp = unsafe_arena_release_vel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoboCupSSL::Vector2* TrackedRobot::unsafe_arena_release_vel() {
  // @@protoc_insertion_point(field_release:RoboCupSSL.TrackedRobot.vel)
  _has_bits_[0] &= ~0x00000004u;
  ::RoboCupSSL::Vector2* temp = vel_;
  vel_ = nullptr;
  return temp;
}
inline ::RoboCupSSL::Vector2* TrackedRobot::_internal_mutable_vel() {
  _has_bits_[0] |= 0x00000004u;
  if (vel_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoboCupSSL::Vector2>(GetArena());
    vel_ = p;
  }
  return vel_;
}
inline ::RoboCupSSL::Vector2* TrackedRobot::mutable_vel() {
  // @@protoc_insertion_point(field_mutable:RoboCupSSL.TrackedRobot.vel)
  return _internal_mutable_vel();
}
inline void TrackedRobot::set_allocated_vel(::RoboCupSSL::Vector2* vel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_);
  }
  if (vel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel)->GetArena();
    if (message_arena != submessage_arena) {
      vel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  vel_ = vel;
  // @@protoc_insertion_point(field_set_allocated:RoboCupSSL.TrackedRobot.vel)
}

// optional float vel_angular = 5;
inline bool TrackedRobot::_internal_has_vel_angular() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrackedRobot::has_vel_angular() const {
  return _internal_has_vel_angular();
}
inline void TrackedRobot::clear_vel_angular() {
  vel_angular_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float TrackedRobot::_internal_vel_angular() const {
  return vel_angular_;
}
inline float TrackedRobot::vel_angular() const {
  // @@protoc_insertion_point(field_get:RoboCupSSL.TrackedRobot.vel_angular)
  return _internal_vel_angular();
}
inline void TrackedRobot::_internal_set_vel_angular(float value) {
  _has_bits_[0] |= 0x00000010u;
  vel_angular_ = value;
}
inline void TrackedRobot::set_vel_angular(float value) {
  _internal_set_vel_angular(value);
  // @@protoc_insertion_point(field_set:RoboCupSSL.TrackedRobot.vel_angular)
}

// optional float visibility = 6;
inline bool TrackedRobot::_internal_has_visibility() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrackedRobot::has_visibility() const {
  return _internal_has_visibility();
}
inline void TrackedRobot::clear_visibility() {
  visibility_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float TrackedRobot::_internal_visibility() const {
  return visibility_;
}
inline float TrackedRobot::visibility() const {
  // @@protoc_insertion_point(field_get:RoboCupSSL.TrackedRobot.visibility)
  return _internal_visibility();
}
inline void TrackedRobot::_internal_set_visibility(float value) {
  _has_bits_[0] |= 0x00000020u;
  visibility_ = value;
}
inline void TrackedRobot::set_visibility(float value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:RoboCupSSL.TrackedRobot.visibility)
}

// -------------------------------------------------------------------

// TrackedFrame

// required uint32 frame_number = 1;
inline bool TrackedFrame::_internal_has_frame_number() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrackedFrame::has_frame_number() const {
  return _internal_has_frame_number();
}
inline void TrackedFrame::clear_frame_number() {
  frame_number_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrackedFrame::_internal_frame_number() const {
  return frame_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrackedFrame::frame_number() const {
  // @@protoc_insertion_point(field_get:RoboCupSSL.TrackedFrame.frame_number)
  return _internal_frame_number();
}
inline void TrackedFrame::_internal_set_frame_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  frame_number_ = value;
}
inline void TrackedFrame::set_frame_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frame_number(value);
  // @@protoc_insertion_point(field_set:RoboCupSSL.TrackedFrame.frame_number)
}

// required double timestamp = 2;
inline bool TrackedFrame::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrackedFrame::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void TrackedFrame::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double TrackedFrame::_internal_timestamp() const {
  return timestamp_;
}
inline double TrackedFrame::timestamp() const {
  // @@protoc_insertion_point(field_get:RoboCupSSL.TrackedFrame.timestamp)
  return _internal_timestamp();
}
inline void TrackedFrame::_internal_set_timestamp(double value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void TrackedFrame::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:RoboCupSSL.TrackedFrame.timestamp)
}

// repeated .RoboCupSSL.TrackedBall balls = 3;
inline int TrackedFrame::_internal_balls_size() const {
  return balls_.size();
}
inline int TrackedFrame::balls_size() const {
  return _internal_balls_size();
}
inline void TrackedFrame::clear_balls() {
  balls_.Clear();
}
inline ::RoboCupSSL::TrackedBall* TrackedFrame::mutable_balls(int index) {
  // @@protoc_insertion_point(field_mutable:RoboCupSSL.TrackedFrame.balls)
  return balls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoboCupSSL::TrackedBall >*
TrackedFrame::mutable_balls() {
  // @@protoc_insertion_point(field_mutable_list:RoboCupSSL.TrackedFrame.balls)
  return &balls_;
}
inline const ::RoboCupSSL::TrackedBall& TrackedFrame::_internal_balls(int index) const {
  return balls_.Get(index);
}
inline const ::RoboCupSSL::TrackedBall& TrackedFrame::balls(int index) const {
  // @@protoc_insertion_point(field_get:RoboCupSSL.TrackedFrame.balls)
  return _internal_balls(index);
}
inline ::RoboCupSSL::TrackedBall* TrackedFrame::_internal_add_balls() {
  return balls_.Add();
}
inline ::RoboCupSSL::TrackedBall* TrackedFrame::add_balls() {
  // @@protoc_insertion_point(field_add:RoboCupSSL.TrackedFrame.balls)
  return _internal_add_balls();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoboCupSSL::TrackedBall >&
TrackedFrame::balls() const {
  // @@protoc_insertion_point(field_list:RoboCupSSL.TrackedFrame.balls)
  return balls_;
}

// repeated .RoboCupSSL.TrackedRobot robots = 4;
inline int TrackedFrame::_internal_robots_size() const {
  return robots_.size();
}
inline int TrackedFrame::robots_size() const {
  return _internal_robots_size();
}
inline void TrackedFrame::clear_robots() {
  robots_.Clear();
}
inline ::RoboCupSSL::TrackedRobot* TrackedFrame::mutable_robots(int index) {
  // @@protoc_insertion_point(field_mutable:RoboCupSSL.TrackedFrame.robots)
  return robots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoboCupSSL::TrackedRobot >*
TrackedFrame::mutable_robots() {
  // @@protoc_insertion_point(field_mutable_list:RoboCupSSL.TrackedFrame.robots)
  return &robots_;
}
inline const ::RoboCupSSL::TrackedRobot& TrackedFrame::_internal_robots(int index) const {
  return robots_.Get(index);
}
inline const ::RoboCupSSL::TrackedRobot& TrackedFrame::robots(int index) const {
  // @@protoc_insertion_point(field_get:RoboCupSSL.TrackedFrame.robots)
  return _internal_robots(index);
}
inline ::RoboCupSSL::TrackedRobot* TrackedFrame::_internal_add_robots() {
  return robots_.Add();
}
inline ::RoboCupSSL::TrackedRobot* TrackedFrame::add_robots() {
  // @@protoc_insertion_point(field_add:RoboCupSSL.TrackedFrame.robots)
  return _internal_add_robots();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoboCupSSL::TrackedRobot >&
TrackedFrame::robots() const {
  // @@protoc_insertion_point(field_list:RoboCupSSL.TrackedFrame.robots)
  return robots_;
}

// optional .RoboCupSSL.KickedBall kicked_ball = 5;
inline bool TrackedFrame::_internal_has_kicked_ball() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || kicked_ball_ != nullptr);
  return value;
}
inline bool TrackedFrame::has_kicked_ball() const {
  return _internal_has_kicked_ball();
}
inline void TrackedFrame::clear_kicked_ball() {
  if (kicked_ball_ != nullptr) kicked_ball_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::RoboCupSSL::KickedBall& TrackedFrame::_internal_kicked_ball() const {
  const ::RoboCupSSL::KickedBall* p = kicked_ball_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoboCupSSL::KickedBall*>(
      &::RoboCupSSL::_KickedBall_default_instance_);
}
inline const ::RoboCupSSL::KickedBall& TrackedFrame::kicked_ball() const {
  // @@protoc_insertion_point(field_get:RoboCupSSL.TrackedFrame.kicked_ball)
  return _internal_kicked_ball();
}
inline void TrackedFrame::unsafe_arena_set_allocated_kicked_ball(
    ::RoboCupSSL::KickedBall* kicked_ball) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kicked_ball_);
  }
  kicked_ball_ = kicked_ball;
  if (kicked_ball) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RoboCupSSL.TrackedFrame.kicked_ball)
}
inline ::RoboCupSSL::KickedBall* TrackedFrame::release_kicked_ball() {
  auto temp = unsafe_arena_release_kicked_ball();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RoboCupSSL::KickedBall* TrackedFrame::unsafe_arena_release_kicked_ball() {
  // @@protoc_insertion_point(field_release:RoboCupSSL.TrackedFrame.kicked_ball)
  _has_bits_[0] &= ~0x00000001u;
  ::RoboCupSSL::KickedBall* temp = kicked_ball_;
  kicked_ball_ = nullptr;
  return temp;
}
inline ::RoboCupSSL::KickedBall* TrackedFrame::_internal_mutable_kicked_ball() {
  _has_bits_[0] |= 0x00000001u;
  if (kicked_ball_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoboCupSSL::KickedBall>(GetArena());
    kicked_ball_ = p;
  }
  return kicked_ball_;
}
inline ::RoboCupSSL::KickedBall* TrackedFrame::mutable_kicked_ball() {
  // @@protoc_insertion_point(field_mutable:RoboCupSSL.TrackedFrame.kicked_ball)
  return _internal_mutable_kicked_ball();
}
inline void TrackedFrame::set_allocated_kicked_ball(::RoboCupSSL::KickedBall* kicked_ball) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete kicked_ball_;
  }
  if (kicked_ball) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(kicked_ball);
    if (message_arena != submessage_arena) {
      kicked_ball = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kicked_ball, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  kicked_ball_ = kicked_ball;
  // @@protoc_insertion_point(field_set_allocated:RoboCupSSL.TrackedFrame.kicked_ball)
}

// repeated .RoboCupSSL.Capability capabilities = 6;
inline int TrackedFrame::_internal_capabilities_size() const {
  return capabilities_.size();
}
inline int TrackedFrame::capabilities_size() const {
  return _internal_capabilities_size();
}
inline void TrackedFrame::clear_capabilities() {
  capabilities_.Clear();
}
inline ::RoboCupSSL::Capability TrackedFrame::_internal_capabilities(int index) const {
  return static_cast< ::RoboCupSSL::Capability >(capabilities_.Get(index));
}
inline ::RoboCupSSL::Capability TrackedFrame::capabilities(int index) const {
  // @@protoc_insertion_point(field_get:RoboCupSSL.TrackedFrame.capabilities)
  return _internal_capabilities(index);
}
inline void TrackedFrame::set_capabilities(int index, ::RoboCupSSL::Capability value) {
  assert(::RoboCupSSL::Capability_IsValid(value));
  capabilities_.Set(index, value);
  // @@protoc_insertion_point(field_set:RoboCupSSL.TrackedFrame.capabilities)
}
inline void TrackedFrame::_internal_add_capabilities(::RoboCupSSL::Capability value) {
  assert(::RoboCupSSL::Capability_IsValid(value));
  capabilities_.Add(value);
}
inline void TrackedFrame::add_capabilities(::RoboCupSSL::Capability value) {
  // @@protoc_insertion_point(field_add:RoboCupSSL.TrackedFrame.capabilities)
  _internal_add_capabilities(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TrackedFrame::capabilities() const {
  // @@protoc_insertion_point(field_list:RoboCupSSL.TrackedFrame.capabilities)
  return capabilities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TrackedFrame::_internal_mutable_capabilities() {
  return &capabilities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TrackedFrame::mutable_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:RoboCupSSL.TrackedFrame.capabilities)
  return _internal_mutable_capabilities();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RoboCupSSL

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RoboCupSSL::Capability> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoboCupSSL::Capability>() {
  return ::RoboCupSSL::Capability_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssl_5fvision_5fdetection_5ftracked_2eproto
