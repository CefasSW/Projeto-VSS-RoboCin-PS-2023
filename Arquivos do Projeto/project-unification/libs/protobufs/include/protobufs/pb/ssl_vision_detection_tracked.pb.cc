// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_vision_detection_tracked.proto

#include "ssl_vision_detection_tracked.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fvision_5fdetection_5ftracked_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_KickedBall_ssl_5fvision_5fdetection_5ftracked_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RobotId_ssl_5fgc_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fvision_5fdetection_5ftracked_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrackedBall_ssl_5fvision_5fdetection_5ftracked_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fvision_5fdetection_5ftracked_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrackedRobot_ssl_5fvision_5fdetection_5ftracked_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_ssl_5fgc_5fgeometry_2eproto;
namespace RoboCupSSL {
class TrackedBallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackedBall> _instance;
} _TrackedBall_default_instance_;
class KickedBallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KickedBall> _instance;
} _KickedBall_default_instance_;
class TrackedRobotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackedRobot> _instance;
} _TrackedRobot_default_instance_;
class TrackedFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackedFrame> _instance;
} _TrackedFrame_default_instance_;
}  // namespace RoboCupSSL
static void InitDefaultsscc_info_KickedBall_ssl_5fvision_5fdetection_5ftracked_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoboCupSSL::_KickedBall_default_instance_;
    new (ptr) ::RoboCupSSL::KickedBall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoboCupSSL::KickedBall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_KickedBall_ssl_5fvision_5fdetection_5ftracked_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_KickedBall_ssl_5fvision_5fdetection_5ftracked_2eproto}, {
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,
      &scc_info_Vector3_ssl_5fgc_5fgeometry_2eproto.base,
      &scc_info_RobotId_ssl_5fgc_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_TrackedBall_ssl_5fvision_5fdetection_5ftracked_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoboCupSSL::_TrackedBall_default_instance_;
    new (ptr) ::RoboCupSSL::TrackedBall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoboCupSSL::TrackedBall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrackedBall_ssl_5fvision_5fdetection_5ftracked_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrackedBall_ssl_5fvision_5fdetection_5ftracked_2eproto}, {
      &scc_info_Vector3_ssl_5fgc_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_TrackedFrame_ssl_5fvision_5fdetection_5ftracked_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoboCupSSL::_TrackedFrame_default_instance_;
    new (ptr) ::RoboCupSSL::TrackedFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoboCupSSL::TrackedFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TrackedFrame_ssl_5fvision_5fdetection_5ftracked_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TrackedFrame_ssl_5fvision_5fdetection_5ftracked_2eproto}, {
      &scc_info_TrackedBall_ssl_5fvision_5fdetection_5ftracked_2eproto.base,
      &scc_info_TrackedRobot_ssl_5fvision_5fdetection_5ftracked_2eproto.base,
      &scc_info_KickedBall_ssl_5fvision_5fdetection_5ftracked_2eproto.base,}};

static void InitDefaultsscc_info_TrackedRobot_ssl_5fvision_5fdetection_5ftracked_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RoboCupSSL::_TrackedRobot_default_instance_;
    new (ptr) ::RoboCupSSL::TrackedRobot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoboCupSSL::TrackedRobot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrackedRobot_ssl_5fvision_5fdetection_5ftracked_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TrackedRobot_ssl_5fvision_5fdetection_5ftracked_2eproto}, {
      &scc_info_RobotId_ssl_5fgc_5fcommon_2eproto.base,
      &scc_info_Vector2_ssl_5fgc_5fgeometry_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ssl_5fvision_5fdetection_5ftracked_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ssl_5fvision_5fdetection_5ftracked_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ssl_5fvision_5fdetection_5ftracked_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ssl_5fvision_5fdetection_5ftracked_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::TrackedBall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::TrackedBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::TrackedBall, pos_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::TrackedBall, vel_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::TrackedBall, visibility_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::KickedBall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::KickedBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::KickedBall, pos_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::KickedBall, vel_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::KickedBall, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::KickedBall, stop_timestamp_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::KickedBall, stop_pos_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::KickedBall, robot_id_),
  0,
  1,
  4,
  5,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::TrackedRobot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::TrackedRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::TrackedRobot, robot_id_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::TrackedRobot, pos_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::TrackedRobot, orientation_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::TrackedRobot, vel_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::TrackedRobot, vel_angular_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::TrackedRobot, visibility_),
  0,
  1,
  3,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::TrackedFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::TrackedFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::TrackedFrame, frame_number_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::TrackedFrame, timestamp_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::TrackedFrame, balls_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::TrackedFrame, robots_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::TrackedFrame, kicked_ball_),
  PROTOBUF_FIELD_OFFSET(::RoboCupSSL::TrackedFrame, capabilities_),
  2,
  1,
  ~0u,
  ~0u,
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::RoboCupSSL::TrackedBall)},
  { 11, 22, sizeof(::RoboCupSSL::KickedBall)},
  { 28, 39, sizeof(::RoboCupSSL::TrackedRobot)},
  { 45, 56, sizeof(::RoboCupSSL::TrackedFrame)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoboCupSSL::_TrackedBall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoboCupSSL::_KickedBall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoboCupSSL::_TrackedRobot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RoboCupSSL::_TrackedFrame_default_instance_),
};

const char descriptor_table_protodef_ssl_5fvision_5fdetection_5ftracked_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"ssl_vision_detection_tracked.proto\022\nRo"
  "boCupSSL\032\023ssl_gc_common.proto\032\025ssl_gc_ge"
  "ometry.proto\"e\n\013TrackedBall\022 \n\003pos\030\001 \002(\013"
  "2\023.RoboCupSSL.Vector3\022 \n\003vel\030\002 \001(\0132\023.Rob"
  "oCupSSL.Vector3\022\022\n\nvisibility\030\003 \001(\002\"\317\001\n\n"
  "KickedBall\022 \n\003pos\030\001 \002(\0132\023.RoboCupSSL.Vec"
  "tor2\022 \n\003vel\030\002 \002(\0132\023.RoboCupSSL.Vector3\022\027"
  "\n\017start_timestamp\030\003 \002(\001\022\026\n\016stop_timestam"
  "p\030\004 \001(\001\022%\n\010stop_pos\030\005 \001(\0132\023.RoboCupSSL.V"
  "ector2\022%\n\010robot_id\030\006 \001(\0132\023.RoboCupSSL.Ro"
  "botId\"\267\001\n\014TrackedRobot\022%\n\010robot_id\030\001 \002(\013"
  "2\023.RoboCupSSL.RobotId\022 \n\003pos\030\002 \002(\0132\023.Rob"
  "oCupSSL.Vector2\022\023\n\013orientation\030\003 \002(\002\022 \n\003"
  "vel\030\004 \001(\0132\023.RoboCupSSL.Vector2\022\023\n\013vel_an"
  "gular\030\005 \001(\002\022\022\n\nvisibility\030\006 \001(\002\"\344\001\n\014Trac"
  "kedFrame\022\024\n\014frame_number\030\001 \002(\r\022\021\n\ttimest"
  "amp\030\002 \002(\001\022&\n\005balls\030\003 \003(\0132\027.RoboCupSSL.Tr"
  "ackedBall\022(\n\006robots\030\004 \003(\0132\030.RoboCupSSL.T"
  "rackedRobot\022+\n\013kicked_ball\030\005 \001(\0132\026.RoboC"
  "upSSL.KickedBall\022,\n\014capabilities\030\006 \003(\0162\026"
  ".RoboCupSSL.Capability*\222\001\n\nCapability\022\026\n"
  "\022CAPABILITY_UNKNOWN\020\000\022\"\n\036CAPABILITY_DETE"
  "CT_FLYING_BALLS\020\001\022$\n CAPABILITY_DETECT_M"
  "ULTIPLE_BALLS\020\002\022\"\n\036CAPABILITY_DETECT_KIC"
  "KED_BALLS\020\003B6Z4github.com/RoboCup-SSL/ss"
  "l-vision-client/pkg/tracked"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto_deps[2] = {
  &::descriptor_table_ssl_5fgc_5fcommon_2eproto,
  &::descriptor_table_ssl_5fgc_5fgeometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto_sccs[4] = {
  &scc_info_KickedBall_ssl_5fvision_5fdetection_5ftracked_2eproto.base,
  &scc_info_TrackedBall_ssl_5fvision_5fdetection_5ftracked_2eproto.base,
  &scc_info_TrackedFrame_ssl_5fvision_5fdetection_5ftracked_2eproto.base,
  &scc_info_TrackedRobot_ssl_5fvision_5fdetection_5ftracked_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto = {
  false, false, descriptor_table_protodef_ssl_5fvision_5fdetection_5ftracked_2eproto, "ssl_vision_detection_tracked.proto", 1027,
  &descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto_once, descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto_sccs, descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_ssl_5fvision_5fdetection_5ftracked_2eproto::offsets,
  file_level_metadata_ssl_5fvision_5fdetection_5ftracked_2eproto, 4, file_level_enum_descriptors_ssl_5fvision_5fdetection_5ftracked_2eproto, file_level_service_descriptors_ssl_5fvision_5fdetection_5ftracked_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ssl_5fvision_5fdetection_5ftracked_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto)), true);
namespace RoboCupSSL {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Capability_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto);
  return file_level_enum_descriptors_ssl_5fvision_5fdetection_5ftracked_2eproto[0];
}
bool Capability_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TrackedBall::InitAsDefaultInstance() {
  ::RoboCupSSL::_TrackedBall_default_instance_._instance.get_mutable()->pos_ = const_cast< ::RoboCupSSL::Vector3*>(
      ::RoboCupSSL::Vector3::internal_default_instance());
  ::RoboCupSSL::_TrackedBall_default_instance_._instance.get_mutable()->vel_ = const_cast< ::RoboCupSSL::Vector3*>(
      ::RoboCupSSL::Vector3::internal_default_instance());
}
class TrackedBall::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackedBall>()._has_bits_);
  static const ::RoboCupSSL::Vector3& pos(const TrackedBall* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::RoboCupSSL::Vector3& vel(const TrackedBall* msg);
  static void set_has_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::RoboCupSSL::Vector3&
TrackedBall::_Internal::pos(const TrackedBall* msg) {
  return *msg->pos_;
}
const ::RoboCupSSL::Vector3&
TrackedBall::_Internal::vel(const TrackedBall* msg) {
  return *msg->vel_;
}
void TrackedBall::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TrackedBall::clear_vel() {
  if (vel_ != nullptr) vel_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TrackedBall::TrackedBall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoboCupSSL.TrackedBall)
}
TrackedBall::TrackedBall(const TrackedBall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::RoboCupSSL::Vector3(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_vel()) {
    vel_ = new ::RoboCupSSL::Vector3(*from.vel_);
  } else {
    vel_ = nullptr;
  }
  visibility_ = from.visibility_;
  // @@protoc_insertion_point(copy_constructor:RoboCupSSL.TrackedBall)
}

void TrackedBall::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackedBall_ssl_5fvision_5fdetection_5ftracked_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visibility_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(visibility_));
}

TrackedBall::~TrackedBall() {
  // @@protoc_insertion_point(destructor:RoboCupSSL.TrackedBall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackedBall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete vel_;
}

void TrackedBall::ArenaDtor(void* object) {
  TrackedBall* _this = reinterpret_cast< TrackedBall* >(object);
  (void)_this;
}
void TrackedBall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackedBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackedBall& TrackedBall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackedBall_ssl_5fvision_5fdetection_5ftracked_2eproto.base);
  return *internal_default_instance();
}


void TrackedBall::Clear() {
// @@protoc_insertion_point(message_clear_start:RoboCupSSL.TrackedBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vel_ != nullptr);
      vel_->Clear();
    }
  }
  visibility_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackedBall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .RoboCupSSL.Vector3 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoboCupSSL.Vector3 vel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float visibility = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_visibility(&has_bits);
          visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackedBall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboCupSSL.TrackedBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .RoboCupSSL.Vector3 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // optional .RoboCupSSL.Vector3 vel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vel(this), target, stream);
  }

  // optional float visibility = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_visibility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboCupSSL.TrackedBall)
  return target;
}

size_t TrackedBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoboCupSSL.TrackedBall)
  size_t total_size = 0;

  // required .RoboCupSSL.Vector3 pos = 1;
  if (_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .RoboCupSSL.Vector3 vel = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vel_);
    }

    // optional float visibility = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackedBall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoboCupSSL.TrackedBall)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackedBall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackedBall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoboCupSSL.TrackedBall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoboCupSSL.TrackedBall)
    MergeFrom(*source);
  }
}

void TrackedBall::MergeFrom(const TrackedBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoboCupSSL.TrackedBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pos()->::RoboCupSSL::Vector3::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_vel()->::RoboCupSSL::Vector3::MergeFrom(from._internal_vel());
    }
    if (cached_has_bits & 0x00000004u) {
      visibility_ = from.visibility_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackedBall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoboCupSSL.TrackedBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackedBall::CopyFrom(const TrackedBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoboCupSSL.TrackedBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedBall::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_pos()) {
    if (!pos_->IsInitialized()) return false;
  }
  if (_internal_has_vel()) {
    if (!vel_->IsInitialized()) return false;
  }
  return true;
}

void TrackedBall::InternalSwap(TrackedBall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackedBall, visibility_)
      + sizeof(TrackedBall::visibility_)
      - PROTOBUF_FIELD_OFFSET(TrackedBall, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackedBall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KickedBall::InitAsDefaultInstance() {
  ::RoboCupSSL::_KickedBall_default_instance_._instance.get_mutable()->pos_ = const_cast< ::RoboCupSSL::Vector2*>(
      ::RoboCupSSL::Vector2::internal_default_instance());
  ::RoboCupSSL::_KickedBall_default_instance_._instance.get_mutable()->vel_ = const_cast< ::RoboCupSSL::Vector3*>(
      ::RoboCupSSL::Vector3::internal_default_instance());
  ::RoboCupSSL::_KickedBall_default_instance_._instance.get_mutable()->stop_pos_ = const_cast< ::RoboCupSSL::Vector2*>(
      ::RoboCupSSL::Vector2::internal_default_instance());
  ::RoboCupSSL::_KickedBall_default_instance_._instance.get_mutable()->robot_id_ = const_cast< ::RoboCupSSL::RobotId*>(
      ::RoboCupSSL::RobotId::internal_default_instance());
}
class KickedBall::_Internal {
 public:
  using HasBits = decltype(std::declval<KickedBall>()._has_bits_);
  static const ::RoboCupSSL::Vector2& pos(const KickedBall* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::RoboCupSSL::Vector3& vel(const KickedBall* msg);
  static void set_has_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stop_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::RoboCupSSL::Vector2& stop_pos(const KickedBall* msg);
  static void set_has_stop_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::RoboCupSSL::RobotId& robot_id(const KickedBall* msg);
  static void set_has_robot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000013) ^ 0x00000013) != 0;
  }
};

const ::RoboCupSSL::Vector2&
KickedBall::_Internal::pos(const KickedBall* msg) {
  return *msg->pos_;
}
const ::RoboCupSSL::Vector3&
KickedBall::_Internal::vel(const KickedBall* msg) {
  return *msg->vel_;
}
const ::RoboCupSSL::Vector2&
KickedBall::_Internal::stop_pos(const KickedBall* msg) {
  return *msg->stop_pos_;
}
const ::RoboCupSSL::RobotId&
KickedBall::_Internal::robot_id(const KickedBall* msg) {
  return *msg->robot_id_;
}
void KickedBall::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void KickedBall::clear_vel() {
  if (vel_ != nullptr) vel_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void KickedBall::clear_stop_pos() {
  if (stop_pos_ != nullptr) stop_pos_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void KickedBall::clear_robot_id() {
  if (robot_id_ != nullptr) robot_id_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
KickedBall::KickedBall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoboCupSSL.KickedBall)
}
KickedBall::KickedBall(const KickedBall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::RoboCupSSL::Vector2(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_vel()) {
    vel_ = new ::RoboCupSSL::Vector3(*from.vel_);
  } else {
    vel_ = nullptr;
  }
  if (from._internal_has_stop_pos()) {
    stop_pos_ = new ::RoboCupSSL::Vector2(*from.stop_pos_);
  } else {
    stop_pos_ = nullptr;
  }
  if (from._internal_has_robot_id()) {
    robot_id_ = new ::RoboCupSSL::RobotId(*from.robot_id_);
  } else {
    robot_id_ = nullptr;
  }
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_timestamp_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(stop_timestamp_));
  // @@protoc_insertion_point(copy_constructor:RoboCupSSL.KickedBall)
}

void KickedBall::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KickedBall_ssl_5fvision_5fdetection_5ftracked_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_timestamp_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(stop_timestamp_));
}

KickedBall::~KickedBall() {
  // @@protoc_insertion_point(destructor:RoboCupSSL.KickedBall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KickedBall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete vel_;
  if (this != internal_default_instance()) delete stop_pos_;
  if (this != internal_default_instance()) delete robot_id_;
}

void KickedBall::ArenaDtor(void* object) {
  KickedBall* _this = reinterpret_cast< KickedBall* >(object);
  (void)_this;
}
void KickedBall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KickedBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KickedBall& KickedBall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KickedBall_ssl_5fvision_5fdetection_5ftracked_2eproto.base);
  return *internal_default_instance();
}


void KickedBall::Clear() {
// @@protoc_insertion_point(message_clear_start:RoboCupSSL.KickedBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vel_ != nullptr);
      vel_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stop_pos_ != nullptr);
      stop_pos_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(robot_id_ != nullptr);
      robot_id_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stop_timestamp_) -
        reinterpret_cast<char*>(&start_timestamp_)) + sizeof(stop_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KickedBall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .RoboCupSSL.Vector2 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .RoboCupSSL.Vector3 vel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double start_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_start_timestamp(&has_bits);
          start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double stop_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_stop_timestamp(&has_bits);
          stop_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .RoboCupSSL.Vector2 stop_pos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RoboCupSSL.RobotId robot_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_robot_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KickedBall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboCupSSL.KickedBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .RoboCupSSL.Vector2 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // required .RoboCupSSL.Vector3 vel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vel(this), target, stream);
  }

  // required double start_timestamp = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_start_timestamp(), target);
  }

  // optional double stop_timestamp = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_stop_timestamp(), target);
  }

  // optional .RoboCupSSL.Vector2 stop_pos = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stop_pos(this), target, stream);
  }

  // optional .RoboCupSSL.RobotId robot_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::robot_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboCupSSL.KickedBall)
  return target;
}

size_t KickedBall::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RoboCupSSL.KickedBall)
  size_t total_size = 0;

  if (_internal_has_pos()) {
    // required .RoboCupSSL.Vector2 pos = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  if (_internal_has_vel()) {
    // required .RoboCupSSL.Vector3 vel = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vel_);
  }

  if (_internal_has_start_timestamp()) {
    // required double start_timestamp = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t KickedBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoboCupSSL.KickedBall)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required .RoboCupSSL.Vector2 pos = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);

    // required .RoboCupSSL.Vector3 vel = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vel_);

    // required double start_timestamp = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .RoboCupSSL.Vector2 stop_pos = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stop_pos_);
    }

    // optional .RoboCupSSL.RobotId robot_id = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *robot_id_);
    }

  }
  // optional double stop_timestamp = 4;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KickedBall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoboCupSSL.KickedBall)
  GOOGLE_DCHECK_NE(&from, this);
  const KickedBall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KickedBall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoboCupSSL.KickedBall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoboCupSSL.KickedBall)
    MergeFrom(*source);
  }
}

void KickedBall::MergeFrom(const KickedBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoboCupSSL.KickedBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pos()->::RoboCupSSL::Vector2::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_vel()->::RoboCupSSL::Vector3::MergeFrom(from._internal_vel());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stop_pos()->::RoboCupSSL::Vector2::MergeFrom(from._internal_stop_pos());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_robot_id()->::RoboCupSSL::RobotId::MergeFrom(from._internal_robot_id());
    }
    if (cached_has_bits & 0x00000010u) {
      start_timestamp_ = from.start_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      stop_timestamp_ = from.stop_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KickedBall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoboCupSSL.KickedBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickedBall::CopyFrom(const KickedBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoboCupSSL.KickedBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickedBall::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_pos()) {
    if (!pos_->IsInitialized()) return false;
  }
  if (_internal_has_vel()) {
    if (!vel_->IsInitialized()) return false;
  }
  if (_internal_has_stop_pos()) {
    if (!stop_pos_->IsInitialized()) return false;
  }
  return true;
}

void KickedBall::InternalSwap(KickedBall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KickedBall, stop_timestamp_)
      + sizeof(KickedBall::stop_timestamp_)
      - PROTOBUF_FIELD_OFFSET(KickedBall, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KickedBall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackedRobot::InitAsDefaultInstance() {
  ::RoboCupSSL::_TrackedRobot_default_instance_._instance.get_mutable()->robot_id_ = const_cast< ::RoboCupSSL::RobotId*>(
      ::RoboCupSSL::RobotId::internal_default_instance());
  ::RoboCupSSL::_TrackedRobot_default_instance_._instance.get_mutable()->pos_ = const_cast< ::RoboCupSSL::Vector2*>(
      ::RoboCupSSL::Vector2::internal_default_instance());
  ::RoboCupSSL::_TrackedRobot_default_instance_._instance.get_mutable()->vel_ = const_cast< ::RoboCupSSL::Vector2*>(
      ::RoboCupSSL::Vector2::internal_default_instance());
}
class TrackedRobot::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackedRobot>()._has_bits_);
  static const ::RoboCupSSL::RobotId& robot_id(const TrackedRobot* msg);
  static void set_has_robot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::RoboCupSSL::Vector2& pos(const TrackedRobot* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::RoboCupSSL::Vector2& vel(const TrackedRobot* msg);
  static void set_has_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vel_angular(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

const ::RoboCupSSL::RobotId&
TrackedRobot::_Internal::robot_id(const TrackedRobot* msg) {
  return *msg->robot_id_;
}
const ::RoboCupSSL::Vector2&
TrackedRobot::_Internal::pos(const TrackedRobot* msg) {
  return *msg->pos_;
}
const ::RoboCupSSL::Vector2&
TrackedRobot::_Internal::vel(const TrackedRobot* msg) {
  return *msg->vel_;
}
void TrackedRobot::clear_robot_id() {
  if (robot_id_ != nullptr) robot_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TrackedRobot::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TrackedRobot::clear_vel() {
  if (vel_ != nullptr) vel_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TrackedRobot::TrackedRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoboCupSSL.TrackedRobot)
}
TrackedRobot::TrackedRobot(const TrackedRobot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_robot_id()) {
    robot_id_ = new ::RoboCupSSL::RobotId(*from.robot_id_);
  } else {
    robot_id_ = nullptr;
  }
  if (from._internal_has_pos()) {
    pos_ = new ::RoboCupSSL::Vector2(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_vel()) {
    vel_ = new ::RoboCupSSL::Vector2(*from.vel_);
  } else {
    vel_ = nullptr;
  }
  ::memcpy(&orientation_, &from.orientation_,
    static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&orientation_)) + sizeof(visibility_));
  // @@protoc_insertion_point(copy_constructor:RoboCupSSL.TrackedRobot)
}

void TrackedRobot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackedRobot_ssl_5fvision_5fdetection_5ftracked_2eproto.base);
  ::memset(&robot_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visibility_) -
      reinterpret_cast<char*>(&robot_id_)) + sizeof(visibility_));
}

TrackedRobot::~TrackedRobot() {
  // @@protoc_insertion_point(destructor:RoboCupSSL.TrackedRobot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackedRobot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete robot_id_;
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete vel_;
}

void TrackedRobot::ArenaDtor(void* object) {
  TrackedRobot* _this = reinterpret_cast< TrackedRobot* >(object);
  (void)_this;
}
void TrackedRobot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackedRobot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackedRobot& TrackedRobot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackedRobot_ssl_5fvision_5fdetection_5ftracked_2eproto.base);
  return *internal_default_instance();
}


void TrackedRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:RoboCupSSL.TrackedRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(robot_id_ != nullptr);
      robot_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(vel_ != nullptr);
      vel_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&orientation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visibility_) -
        reinterpret_cast<char*>(&orientation_)) + sizeof(visibility_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackedRobot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .RoboCupSSL.RobotId robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_robot_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .RoboCupSSL.Vector2 pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_orientation(&has_bits);
          orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .RoboCupSSL.Vector2 vel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float vel_angular = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_vel_angular(&has_bits);
          vel_angular_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float visibility = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_visibility(&has_bits);
          visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackedRobot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboCupSSL.TrackedRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .RoboCupSSL.RobotId robot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::robot_id(this), target, stream);
  }

  // required .RoboCupSSL.Vector2 pos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  // required float orientation = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_orientation(), target);
  }

  // optional .RoboCupSSL.Vector2 vel = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::vel(this), target, stream);
  }

  // optional float vel_angular = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_vel_angular(), target);
  }

  // optional float visibility = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_visibility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboCupSSL.TrackedRobot)
  return target;
}

size_t TrackedRobot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RoboCupSSL.TrackedRobot)
  size_t total_size = 0;

  if (_internal_has_robot_id()) {
    // required .RoboCupSSL.RobotId robot_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *robot_id_);
  }

  if (_internal_has_pos()) {
    // required .RoboCupSSL.Vector2 pos = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  if (_internal_has_orientation()) {
    // required float orientation = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t TrackedRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoboCupSSL.TrackedRobot)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .RoboCupSSL.RobotId robot_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *robot_id_);

    // required .RoboCupSSL.Vector2 pos = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);

    // required float orientation = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .RoboCupSSL.Vector2 vel = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vel_);
  }

  if (cached_has_bits & 0x00000030u) {
    // optional float vel_angular = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float visibility = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackedRobot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoboCupSSL.TrackedRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackedRobot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackedRobot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoboCupSSL.TrackedRobot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoboCupSSL.TrackedRobot)
    MergeFrom(*source);
  }
}

void TrackedRobot::MergeFrom(const TrackedRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoboCupSSL.TrackedRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_robot_id()->::RoboCupSSL::RobotId::MergeFrom(from._internal_robot_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pos()->::RoboCupSSL::Vector2::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_vel()->::RoboCupSSL::Vector2::MergeFrom(from._internal_vel());
    }
    if (cached_has_bits & 0x00000008u) {
      orientation_ = from.orientation_;
    }
    if (cached_has_bits & 0x00000010u) {
      vel_angular_ = from.vel_angular_;
    }
    if (cached_has_bits & 0x00000020u) {
      visibility_ = from.visibility_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackedRobot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoboCupSSL.TrackedRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackedRobot::CopyFrom(const TrackedRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoboCupSSL.TrackedRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedRobot::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_pos()) {
    if (!pos_->IsInitialized()) return false;
  }
  if (_internal_has_vel()) {
    if (!vel_->IsInitialized()) return false;
  }
  return true;
}

void TrackedRobot::InternalSwap(TrackedRobot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackedRobot, visibility_)
      + sizeof(TrackedRobot::visibility_)
      - PROTOBUF_FIELD_OFFSET(TrackedRobot, robot_id_)>(
          reinterpret_cast<char*>(&robot_id_),
          reinterpret_cast<char*>(&other->robot_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackedRobot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackedFrame::InitAsDefaultInstance() {
  ::RoboCupSSL::_TrackedFrame_default_instance_._instance.get_mutable()->kicked_ball_ = const_cast< ::RoboCupSSL::KickedBall*>(
      ::RoboCupSSL::KickedBall::internal_default_instance());
}
class TrackedFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackedFrame>()._has_bits_);
  static void set_has_frame_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::RoboCupSSL::KickedBall& kicked_ball(const TrackedFrame* msg);
  static void set_has_kicked_ball(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::RoboCupSSL::KickedBall&
TrackedFrame::_Internal::kicked_ball(const TrackedFrame* msg) {
  return *msg->kicked_ball_;
}
TrackedFrame::TrackedFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  balls_(arena),
  robots_(arena),
  capabilities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RoboCupSSL.TrackedFrame)
}
TrackedFrame::TrackedFrame(const TrackedFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      balls_(from.balls_),
      robots_(from.robots_),
      capabilities_(from.capabilities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kicked_ball()) {
    kicked_ball_ = new ::RoboCupSSL::KickedBall(*from.kicked_ball_);
  } else {
    kicked_ball_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_number_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(frame_number_));
  // @@protoc_insertion_point(copy_constructor:RoboCupSSL.TrackedFrame)
}

void TrackedFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackedFrame_ssl_5fvision_5fdetection_5ftracked_2eproto.base);
  ::memset(&kicked_ball_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_number_) -
      reinterpret_cast<char*>(&kicked_ball_)) + sizeof(frame_number_));
}

TrackedFrame::~TrackedFrame() {
  // @@protoc_insertion_point(destructor:RoboCupSSL.TrackedFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackedFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete kicked_ball_;
}

void TrackedFrame::ArenaDtor(void* object) {
  TrackedFrame* _this = reinterpret_cast< TrackedFrame* >(object);
  (void)_this;
}
void TrackedFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackedFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackedFrame& TrackedFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackedFrame_ssl_5fvision_5fdetection_5ftracked_2eproto.base);
  return *internal_default_instance();
}


void TrackedFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:RoboCupSSL.TrackedFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  balls_.Clear();
  robots_.Clear();
  capabilities_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(kicked_ball_ != nullptr);
    kicked_ball_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frame_number_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(frame_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackedFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 frame_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_frame_number(&has_bits);
          frame_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .RoboCupSSL.TrackedBall balls = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_balls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .RoboCupSSL.TrackedRobot robots = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .RoboCupSSL.KickedBall kicked_ball = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_kicked_ball(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .RoboCupSSL.Capability capabilities = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::RoboCupSSL::Capability_IsValid(val))) {
              _internal_add_capabilities(static_cast<::RoboCupSSL::Capability>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_capabilities(), ptr, ctx, ::RoboCupSSL::Capability_IsValid, &_internal_metadata_, 6);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackedFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboCupSSL.TrackedFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 frame_number = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_frame_number(), target);
  }

  // required double timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_timestamp(), target);
  }

  // repeated .RoboCupSSL.TrackedBall balls = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_balls_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_balls(i), target, stream);
  }

  // repeated .RoboCupSSL.TrackedRobot robots = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_robots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_robots(i), target, stream);
  }

  // optional .RoboCupSSL.KickedBall kicked_ball = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::kicked_ball(this), target, stream);
  }

  // repeated .RoboCupSSL.Capability capabilities = 6;
  for (int i = 0, n = this->_internal_capabilities_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        6, this->_internal_capabilities(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboCupSSL.TrackedFrame)
  return target;
}

size_t TrackedFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RoboCupSSL.TrackedFrame)
  size_t total_size = 0;

  if (_internal_has_timestamp()) {
    // required double timestamp = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_frame_number()) {
    // required uint32 frame_number = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame_number());
  }

  return total_size;
}
size_t TrackedFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoboCupSSL.TrackedFrame)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required double timestamp = 2;
    total_size += 1 + 8;

    // required uint32 frame_number = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RoboCupSSL.TrackedBall balls = 3;
  total_size += 1UL * this->_internal_balls_size();
  for (const auto& msg : this->balls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .RoboCupSSL.TrackedRobot robots = 4;
  total_size += 1UL * this->_internal_robots_size();
  for (const auto& msg : this->robots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .RoboCupSSL.Capability capabilities = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_capabilities_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_capabilities(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional .RoboCupSSL.KickedBall kicked_ball = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kicked_ball_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackedFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoboCupSSL.TrackedFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackedFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackedFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoboCupSSL.TrackedFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoboCupSSL.TrackedFrame)
    MergeFrom(*source);
  }
}

void TrackedFrame::MergeFrom(const TrackedFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoboCupSSL.TrackedFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  balls_.MergeFrom(from.balls_);
  robots_.MergeFrom(from.robots_);
  capabilities_.MergeFrom(from.capabilities_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_kicked_ball()->::RoboCupSSL::KickedBall::MergeFrom(from._internal_kicked_ball());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      frame_number_ = from.frame_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackedFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoboCupSSL.TrackedFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackedFrame::CopyFrom(const TrackedFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoboCupSSL.TrackedFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(balls_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(robots_)) return false;
  if (_internal_has_kicked_ball()) {
    if (!kicked_ball_->IsInitialized()) return false;
  }
  return true;
}

void TrackedFrame::InternalSwap(TrackedFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  balls_.InternalSwap(&other->balls_);
  robots_.InternalSwap(&other->robots_);
  capabilities_.InternalSwap(&other->capabilities_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackedFrame, frame_number_)
      + sizeof(TrackedFrame::frame_number_)
      - PROTOBUF_FIELD_OFFSET(TrackedFrame, kicked_ball_)>(
          reinterpret_cast<char*>(&kicked_ball_),
          reinterpret_cast<char*>(&other->kicked_ball_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackedFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace RoboCupSSL
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RoboCupSSL::TrackedBall* Arena::CreateMaybeMessage< ::RoboCupSSL::TrackedBall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoboCupSSL::TrackedBall >(arena);
}
template<> PROTOBUF_NOINLINE ::RoboCupSSL::KickedBall* Arena::CreateMaybeMessage< ::RoboCupSSL::KickedBall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoboCupSSL::KickedBall >(arena);
}
template<> PROTOBUF_NOINLINE ::RoboCupSSL::TrackedRobot* Arena::CreateMaybeMessage< ::RoboCupSSL::TrackedRobot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoboCupSSL::TrackedRobot >(arena);
}
template<> PROTOBUF_NOINLINE ::RoboCupSSL::TrackedFrame* Arena::CreateMaybeMessage< ::RoboCupSSL::TrackedFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoboCupSSL::TrackedFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
